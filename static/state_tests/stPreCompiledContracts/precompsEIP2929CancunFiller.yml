# Check which low address contracts (precompiles) are part of the EIP2929
# access lists. This was the Berlin fork OpenEthereum bug, that they thought
# 0x00.000a was in the access list and the other clients disagreed (see
# https://twitter.com/ralexstokes/status/1382750525070868484 and
# https://twitter.com/ralexstokes/status/1382750938142629889)
#
# According to EIP2929 (https://eips.ethereum.org/EIPS/eip-2929#abstract) precompiles
# are exempt from the opcode cost increases for the first (cold) access, they are
# always hot.
#
# NOTE: This does not apply to sending contracts wei (see below in the definition
#       of 0xCC..CCC)


precompsEIP2929Cancun:

  env:
    currentCoinbase: 2adc25665018aa1fe0e6bc666dac8fc2697ff9ba
    currentDifficulty: '0x20000'
    currentGasLimit: '0xFF112233445566'
    currentNumber: '1'
    currentTimestamp: '1000'


  _info:
    comment: Ori Pomerantz qbzzt1@gmail.com


  pre:  

    # Check if the cost of doing various things to an account is the same
    # cost the first time as the second
    #
    # If the account is a precompile it should be, because it should already
    # be on the EIP2929 access list.
    #
    # NOTE: This does not apply to sending contracts wei. If there is no trie for
    #       a precompile it will have to be created and that costs gas. However,
    #       in the real world (a.k.a. mainnet) all the accounts up to 0x00...00020
    #       already have a balance (and therefore a trie) and this issue won't
    #       happen with them.
    #
    # calldataload(0x04) - account number to check
    # calldataload(0x24) - action:
    #    0xf100 - CALL
    #    0xf101 - CALL and send one wei
    #    0xf102 - CALL and send one byte of input
    #    0xf103 - CALL with one wei and one byte
    #    0xf104 - CALL and receive one byte of output
    #    0xf105 - CALL with one wei and receive one byte
    #    0xf200 - CALL
    #    0xf201 - CALL and send one wei
    #    0xf202 - CALL and send one byte of input
    #    0xf203 - CALL with one wei and one byte
    #    0xf204 - CALL and receive one byte of output
    #    0xf205 - CALL with one wei and receive one byte
    #    0xf400 - CALL
    #    0xf401 - CALL and send one wei
    #    0xf402 - CALL and send one byte of input
    #    0xf403 - CALL with one wei and one byte
    #    0xf404 - CALL and receive one byte of output
    #    0xf405 - CALL with one wei and receive one byte
    #    0xfa00 - CALL
    #    0xfa01 - CALL and send one wei
    #    0xfa02 - CALL and send one byte of input
    #    0xfa03 - CALL with one wei and one byte
    #    0xfa04 - CALL and receive one byte of output
    #    0xfa05 - CALL with one wei and receive one byte
    #      0x31 - read the balance
    #      0x3B - get code size
    #      0x3C - copy code
    #      0x3F - get the code hash
    cccccccccccccccccccccccccccccccccccccccc:
      code: |
        :yul berlin optimise
        {
          let addrTest   := calldataload(0x04)
          let action     := calldataload(0x24)
          let gas0, gas1, gas2

          // Not really needed, but otherwise Yul optimizes and 
          // skips operations we need
          let useless0, useless1

          // Touch the first word of memory here, so it
          // won't confuse the gas measurement
          mstore(0x100, 0xDEADBEEF)

          // Access 0x101157 (so it becomes warm and send it wei)
          pop(call(0x100000, 0x101157, 1, 0, 0, 0, 0))

          // Switch before measuring, so it won't affect
          // the gas costs
          switch action
          case 0xf100 {
              gas0 := gas()
              pop(call(0x100000, addrTest, 0, 0, 0, 0, 0))
              gas1 := gas()
              pop(call(0x100000, addrTest, 0, 0, 0, 0, 0))
              gas2 := gas()
          }
          case 0xf101 {
              gas0 := gas()
              pop(call(0x100000, addrTest, 1, 0, 0, 0, 0))
              gas1 := gas()
              pop(call(0x100000, addrTest, 1, 0, 0, 0, 0))
              gas2 := gas()
          }
          case 0xf102 {
              gas0 := gas()
              pop(call(0x100000, addrTest, 0, 0, 1, 0, 0))
              gas1 := gas()
              pop(call(0x100000, addrTest, 0, 0, 1, 0, 0))
              gas2 := gas()
          }
          case 0xf103 {
              gas0 := gas()
              pop(call(0x100000, addrTest, 1, 0, 1, 0, 0))
              gas1 := gas()
              pop(call(0x100000, addrTest, 1, 0, 1, 0, 0))
              gas2 := gas()
          }
          case 0xf104 {
              gas0 := gas()
              pop(call(0x100000, addrTest, 0, 0, 0, 0, 1))
              gas1 := gas()
              pop(call(0x100000, addrTest, 0, 0, 0, 0, 1))
              gas2 := gas()
          }
          case 0xf105 {
              gas0 := gas()
              pop(call(0x100000, addrTest, 1, 0, 0, 0, 1))
              gas1 := gas()
              pop(call(0x100000, addrTest, 1, 0, 0, 0, 1))
              gas2 := gas()
          }
          case 0xf200 {
              gas0 := gas()
              pop(callcode(0x100000, addrTest, 0, 0, 0, 0, 0))
              gas1 := gas()
              pop(callcode(0x100000, addrTest, 0, 0, 0, 0, 0))
              gas2 := gas()
          }
          case 0xf201 {
              gas0 := gas()
              pop(callcode(0x100000, addrTest, 1, 0, 0, 0, 0))
              gas1 := gas()
              pop(callcode(0x100000, addrTest, 1, 0, 0, 0, 0))
              gas2 := gas()
          }
          case 0xf202 {
              gas0 := gas()
              pop(callcode(0x100000, addrTest, 0, 0, 1, 0, 0))
              gas1 := gas()
              pop(callcode(0x100000, addrTest, 0, 0, 1, 0, 0))
              gas2 := gas()
          }
          case 0xf203 {
              gas0 := gas()
              pop(callcode(0x100000, addrTest, 1, 0, 1, 0, 0))
              gas1 := gas()
              pop(callcode(0x100000, addrTest, 1, 0, 1, 0, 0))
              gas2 := gas()
          }
          case 0xf204 {
              gas0 := gas()
              pop(callcode(0x100000, addrTest, 0, 0, 0, 0, 1))
              gas1 := gas()
              pop(callcode(0x100000, addrTest, 0, 0, 0, 0, 1))
              gas2 := gas()
          }
          case 0xf205 {
              gas0 := gas()
              pop(callcode(0x100000, addrTest, 1, 0, 0, 0, 1))
              gas1 := gas()
              pop(callcode(0x100000, addrTest, 1, 0, 0, 0, 1))
              gas2 := gas()
          }
          case 0xf400 {
              gas0 := gas()
              pop(delegatecall(0x100000, addrTest, 0, 0, 0, 0))
              gas1 := gas()
              pop(delegatecall(0x100000, addrTest, 0, 0, 0, 0))
              gas2 := gas()
          }
          case 0xf402 {
              gas0 := gas()
              pop(delegatecall(0x100000, addrTest, 0, 1, 0, 0))
              gas1 := gas()
              pop(delegatecall(0x100000, addrTest, 0, 1, 0, 0))
              gas2 := gas()
          }
          case 0xf404 {
              gas0 := gas()
              pop(delegatecall(0x100000, addrTest, 0, 0, 0, 1))
              gas1 := gas()
              pop(delegatecall(0x100000, addrTest, 0, 0, 0, 1))
              gas2 := gas()
          }
          case 0xfa00 {
              gas0 := gas()
              pop(staticcall(0x100000, addrTest, 0, 0, 0, 0))
              gas1 := gas()
              pop(staticcall(0x100000, addrTest, 0, 0, 0, 0))
              gas2 := gas()
          }
          case 0xfa02 {
              gas0 := gas()
              pop(staticcall(0x100000, addrTest, 0, 1, 0, 0))
              gas1 := gas()
              pop(staticcall(0x100000, addrTest, 0, 1, 0, 0))
              gas2 := gas()
          }
          case 0xfa04 {
              gas0 := gas()
              pop(staticcall(0x100000, addrTest, 0, 0, 0, 1))
              gas1 := gas()
              pop(staticcall(0x100000, addrTest, 0, 0, 0, 1))
              gas2 := gas()
          }


          case 0x31 {
              gas0 := gas()
              useless0 := balance(addrTest)
              gas1 := gas()
              useless1 := balance(addrTest)
              gas2 := gas()
          }
          case 0x3B {
              gas0 := gas()
              useless0 := extcodesize(addrTest)
              gas1 := gas()
              useless1 := extcodesize(addrTest)
              gas2 := gas()
          }
          case 0x3C {
              gas0 := gas()
              extcodecopy(addrTest,0,0,0x100)
              gas1 := gas()
              extcodecopy(addrTest,0,0,0x100)
              gas2 := gas()
          }
          case 0x3F {
              gas0 := gas()
              useless0 := extcodehash(addrTest)
              gas1 := gas()
              useless1 := extcodehash(addrTest)
              gas2 := gas()
          }

          let gasTest1 := sub(gas0, gas1)
          let gasTest2 := sub(gas1, gas2)
          
          sstore(0, eq(gasTest1, gasTest2))
          sstore(1, sub(gasTest1, gasTest2))

          // Otherwise a Yul optimization throws us off
          let noOptimization := msize()
        }  
      nonce: 1
      storage:
        0: 0x60A7
        1: 0x60A7
      balance: 0


    # Just a normal contract for comparison
    000000000000000000000000000000000010c0de:
      code: |
        :yul berlin
        {
           mstore(0,add(1,2))
        }  
      nonce: 1
      storage: {}
      balance: 0


    # And a contract that has been previously accessed
    0000000000000000000000000000000000101157:
      code: |
        :yul berlin
        {
           mstore(0,add(1,2))
        }  
      nonce: 1
      storage: {}
      balance: 0



    a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
      balance: '1000000000000000000'
      code: 0x
      nonce: '0'
      storage: {}


  transaction:
    data:
    # The first parameter is the address to call
    # The second parameter is the action
    #
    # :label no   means that the address is cold (either there is nothing there,
    #             or it exists but hasn't been touched by the txn yet).
    #
    # :label yes  means that the address is already warm. As per the EIP, precompiles
    #             are always warm.


    # Empty account (nothing there)
    - :label no  :abi f(uint,uint) 0x100000 0xf100    # 0

    # Normal contract account
    - :label no  :abi f(uint,uint) 0x10c0de 0xf100    # 1

    # Account that has already been touched
    # (we touch it earlier in 
    - :label yes :abi f(uint,uint) 0x101157 0xf100    # 2



    # Precompiles
    - :label yes :abi f(uint,uint) 0x01 0xf100        # 3
    - :label yes :abi f(uint,uint) 0x02 0xf100        # 4
    - :label yes :abi f(uint,uint) 0x03 0xf100        # 5
    - :label yes :abi f(uint,uint) 0x04 0xf100        # 6
    - :label yes :abi f(uint,uint) 0x05 0xf100        # 7
    - :label yes :abi f(uint,uint) 0x06 0xf100        # 8
    - :label yes :abi f(uint,uint) 0x07 0xf100        # 9
    - :label yes :abi f(uint,uint) 0x08 0xf100        # 10
    - :label yes :abi f(uint,uint) 0x09 0xf100        # 11
    - :label yes :abi f(uint,uint) 0x0a 0xf100        # 12

    # Not precompiles (so far)

    - :label yes_from_prague  :abi f(uint,uint) 0x0b 0xf100        # 13
    - :label yes_from_prague  :abi f(uint,uint) 0x0c 0xf100        # 14
    - :label yes_from_prague  :abi f(uint,uint) 0x0d 0xf100        # 15
    - :label yes_from_prague  :abi f(uint,uint) 0x0e 0xf100        # 16
    - :label yes_from_prague  :abi f(uint,uint) 0x0f 0xf100        # 17
    - :label yes_from_prague  :abi f(uint,uint) 0x10 0xf100        # 17
    - :label yes_from_prague  :abi f(uint,uint) 0x11 0xf100        # 17
    - :label no  :abi f(uint,uint) 0x12 0xf100                     # 17


    # When we do send wei there is an extra cost for the first access because it
    # needs to create the trie for the account. 
    # On a real chain it's possible some precompiles will already have a trie,
    # once somebody sends wei it gets stuck and unretrievable, but we are running
    # as part of a highly artificial test blockchain. 
    - :label new :abi f(uint,uint) 0x01 0xf101        # 18
    - :label new :abi f(uint,uint) 0x02 0xf101        # 19
    - :label new :abi f(uint,uint) 0x03 0xf101        # 20
    - :label new :abi f(uint,uint) 0x04 0xf101        # 21
    - :label new :abi f(uint,uint) 0x05 0xf101        # 22
    - :label new :abi f(uint,uint) 0x06 0xf101        # 23
    - :label new :abi f(uint,uint) 0x07 0xf101        # 24
    - :label new :abi f(uint,uint) 0x08 0xf101        # 25
    # When the transaction is rejected, no cost for the trie
    - :label yes :abi f(uint,uint) 0x09 0xf101        # 26
    - :label yes :abi f(uint,uint) 0x0a 0xf101        # 27
    - :label all_then_yes_from_prague :abi f(uint,uint) 0x0b 0xf101        # 28
    - :label all_then_yes_from_prague :abi f(uint,uint) 0x0c 0xf101        # 29
    - :label all_then_yes_from_prague :abi f(uint,uint) 0x0d 0xf101        # 30
    - :label all_then_yes_from_prague :abi f(uint,uint) 0x0e 0xf101        # 31
    - :label all_then_yes_from_prague :abi f(uint,uint) 0x0f 0xf101        # 32
    - :label all_then_yes_from_prague :abi f(uint,uint) 0x10 0xf101        # 32
    - :label all_then_yes_from_prague :abi f(uint,uint) 0x11 0xf101        # 32
    - :label all :abi f(uint,uint) 0x12 0xf101        # 32
    
    - :label all :abi f(uint,uint) 0x100000 0xf101    # 33
    - :label no  :abi f(uint,uint) 0x10c0de 0xf101    # 34
    - :label yes :abi f(uint,uint) 0x101157 0xf101    # 35

    # If we send data, it behaves normally (except for #8)
    - :label yes :abi f(uint,uint) 0x01 0xf102        # 36
    - :label yes :abi f(uint,uint) 0x02 0xf102        # 37
    - :label yes :abi f(uint,uint) 0x03 0xf102        # 38
    - :label yes :abi f(uint,uint) 0x04 0xf102        # 39
    - :label yes :abi f(uint,uint) 0x05 0xf102        # 40
    - :label yes :abi f(uint,uint) 0x06 0xf102        # 41
    - :label yes :abi f(uint,uint) 0x07 0xf102        # 42
    - :label yes :abi f(uint,uint) 0x08 0xf102        # 43
    - :label yes :abi f(uint,uint) 0x09 0xf102        # 44
    - :label yes :abi f(uint,uint) 0x0a 0xf102        # 45
    - :label yes_from_prague  :abi f(uint,uint) 0x0b 0xf102        # 46
    - :label yes_from_prague  :abi f(uint,uint) 0x0c 0xf102        # 47
    - :label yes_from_prague  :abi f(uint,uint) 0x0d 0xf102        # 48
    - :label yes_from_prague  :abi f(uint,uint) 0x0e 0xf102        # 49
    - :label yes_from_prague  :abi f(uint,uint) 0x0f 0xf102        # 50
    - :label yes_from_prague  :abi f(uint,uint) 0x10 0xf102        # 50
    - :label yes_from_prague  :abi f(uint,uint) 0x11 0xf102        # 50
    - :label no  :abi f(uint,uint) 0x12 0xf102        # 50
    
    - :label no  :abi f(uint,uint) 0x100000 0xf102    # 51
    - :label no  :abi f(uint,uint) 0x10c0de 0xf102    # 52
    - :label yes :abi f(uint,uint) 0x101157 0xf102    # 53

    # If we send wei and data
    - :label new :abi f(uint,uint) 0x01 0xf103        # 54
    - :label new :abi f(uint,uint) 0x02 0xf103        # 55
    - :label new :abi f(uint,uint) 0x03 0xf103        # 56
    - :label new :abi f(uint,uint) 0x04 0xf103        # 57
    - :label new :abi f(uint,uint) 0x05 0xf103        # 58
    - :label new :abi f(uint,uint) 0x06 0xf103        # 59
    - :label new :abi f(uint,uint) 0x07 0xf103        # 60
    - :label yes :abi f(uint,uint) 0x08 0xf103        # 61
    - :label yes :abi f(uint,uint) 0x09 0xf103        # 62
    - :label yes :abi f(uint,uint) 0x0a 0xf103        # 63
    - :label all_then_yes_from_prague :abi f(uint,uint) 0x0b 0xf103        # 64
    - :label all_then_yes_from_prague :abi f(uint,uint) 0x0c 0xf103        # 65
    - :label all_then_yes_from_prague :abi f(uint,uint) 0x0d 0xf103        # 66
    - :label all_then_yes_from_prague :abi f(uint,uint) 0x0e 0xf103        # 67
    - :label all_then_yes_from_prague :abi f(uint,uint) 0x0f 0xf103        # 68
    - :label all_then_yes_from_prague :abi f(uint,uint) 0x10 0xf103        # 68
    - :label all_then_yes_from_prague :abi f(uint,uint) 0x11 0xf103        # 68
    - :label all :abi f(uint,uint) 0x12 0xf103        # 68
        
    - :label all :abi f(uint,uint) 0x100000 0xf103    # 69
    - :label no  :abi f(uint,uint) 0x10c0de 0xf103    # 70
    - :label yes :abi f(uint,uint) 0x101157 0xf103    # 71


    # If we receive data, it behaves normally
    - :label yes :abi f(uint,uint) 0x01 0xf104        # 72
    - :label yes :abi f(uint,uint) 0x02 0xf104        # 73
    - :label yes :abi f(uint,uint) 0x03 0xf104        # 74
    - :label yes :abi f(uint,uint) 0x04 0xf104        # 75
    - :label yes :abi f(uint,uint) 0x05 0xf104        # 76
    - :label yes :abi f(uint,uint) 0x06 0xf104        # 77
    - :label yes :abi f(uint,uint) 0x07 0xf104        # 78
    - :label yes :abi f(uint,uint) 0x08 0xf104        # 79
    - :label yes :abi f(uint,uint) 0x09 0xf104        # 80
    - :label yes :abi f(uint,uint) 0x0a 0xf104        # 81
    - :label yes_from_prague  :abi f(uint,uint) 0x0b 0xf104        # 82
    - :label yes_from_prague  :abi f(uint,uint) 0x0c 0xf104        # 83
    - :label yes_from_prague  :abi f(uint,uint) 0x0d 0xf104        # 84
    - :label yes_from_prague  :abi f(uint,uint) 0x0e 0xf104        # 85
    - :label yes_from_prague  :abi f(uint,uint) 0x0f 0xf104        # 86
    - :label yes_from_prague  :abi f(uint,uint) 0x10 0xf104        # 86
    - :label yes_from_prague  :abi f(uint,uint) 0x11 0xf104        # 86
    - :label no  :abi f(uint,uint) 0x12 0xf104        # 86
    
    - :label no  :abi f(uint,uint) 0x100000 0xf104    # 87
    - :label no  :abi f(uint,uint) 0x10c0de 0xf104    # 88
    - :label yes :abi f(uint,uint) 0x101157 0xf104    # 89

    # If we send wei and receive data
    - :label new :abi f(uint,uint) 0x01 0xf105        # 90
    - :label new :abi f(uint,uint) 0x02 0xf105        # 91
    - :label new :abi f(uint,uint) 0x03 0xf105        # 92
    - :label new :abi f(uint,uint) 0x04 0xf105        # 93
    - :label new :abi f(uint,uint) 0x05 0xf105        # 94
    - :label new :abi f(uint,uint) 0x06 0xf105        # 95
    - :label new :abi f(uint,uint) 0x07 0xf105        # 96
    - :label new :abi f(uint,uint) 0x08 0xf105        # 97
    - :label yes :abi f(uint,uint) 0x09 0xf105        # 98
    - :label yes :abi f(uint,uint) 0x0a 0xf105        # 99
    - :label all_then_yes_from_prague :abi f(uint,uint) 0x0b 0xf105        # 100
    - :label all_then_yes_from_prague :abi f(uint,uint) 0x0c 0xf105        # 101
    - :label all_then_yes_from_prague :abi f(uint,uint) 0x0d 0xf105        # 102
    - :label all_then_yes_from_prague :abi f(uint,uint) 0x0e 0xf105        # 103
    - :label all_then_yes_from_prague :abi f(uint,uint) 0x0f 0xf105        # 104
    - :label all_then_yes_from_prague :abi f(uint,uint) 0x10 0xf105        # 104
    - :label all_then_yes_from_prague :abi f(uint,uint) 0x11 0xf105        # 104
    - :label all :abi f(uint,uint) 0x12 0xf105        # 104
    
    - :label all :abi f(uint,uint) 0x100000 0xf105    # 105
    - :label no  :abi f(uint,uint) 0x10c0de 0xf105    # 106
    - :label yes :abi f(uint,uint) 0x101157 0xf105    # 107

    # CALLCODE
    - :label yes :abi f(uint,uint) 0x01 0xf200        # 108
    - :label yes :abi f(uint,uint) 0x02 0xf200        # 109
    - :label yes :abi f(uint,uint) 0x03 0xf200        # 110
    - :label yes :abi f(uint,uint) 0x04 0xf200        # 111
    - :label yes :abi f(uint,uint) 0x05 0xf200        # 112
    - :label yes :abi f(uint,uint) 0x06 0xf200        # 113
    - :label yes :abi f(uint,uint) 0x07 0xf200        # 114
    - :label yes :abi f(uint,uint) 0x08 0xf200        # 115
    - :label yes :abi f(uint,uint) 0x09 0xf200        # 116
    - :label yes :abi f(uint,uint) 0x0a 0xf200        # 117
    - :label yes_from_prague  :abi f(uint,uint) 0x0b 0xf200        # 118
    - :label yes_from_prague  :abi f(uint,uint) 0x0c 0xf200        # 119
    - :label yes_from_prague  :abi f(uint,uint) 0x0d 0xf200        # 120
    - :label yes_from_prague  :abi f(uint,uint) 0x0e 0xf200        # 121
    - :label yes_from_prague  :abi f(uint,uint) 0x0f 0xf200        # 122
    - :label yes_from_prague  :abi f(uint,uint) 0x10 0xf200        # 122
    - :label yes_from_prague  :abi f(uint,uint) 0x11 0xf200        # 122
    - :label no  :abi f(uint,uint) 0x12 0xf200        # 122
    
    - :label no  :abi f(uint,uint) 0x100000 0xf200    # 123
    - :label no  :abi f(uint,uint) 0x10c0de 0xf200    # 124
    - :label yes :abi f(uint,uint) 0x101157 0xf200    # 125

    # With DELEGATECALL the second call doesn't cost more
    - :label yes :abi f(uint,uint) 0x01 0xf201        # 126
    - :label yes :abi f(uint,uint) 0x02 0xf201        # 127
    - :label yes :abi f(uint,uint) 0x03 0xf201        # 128
    - :label yes :abi f(uint,uint) 0x04 0xf201        # 129
    - :label yes :abi f(uint,uint) 0x05 0xf201        # 130
    - :label yes :abi f(uint,uint) 0x06 0xf201        # 131
    - :label yes :abi f(uint,uint) 0x07 0xf201        # 132
    - :label yes :abi f(uint,uint) 0x08 0xf201        # 133
    - :label yes :abi f(uint,uint) 0x09 0xf201        # 134
    - :label yes :abi f(uint,uint) 0x0a 0xf201        # 135
    - :label yes_from_prague  :abi f(uint,uint) 0x0b 0xf201        # 136
    - :label yes_from_prague  :abi f(uint,uint) 0x0c 0xf201        # 137
    - :label yes_from_prague  :abi f(uint,uint) 0x0d 0xf201        # 138
    - :label yes_from_prague  :abi f(uint,uint) 0x0e 0xf201        # 139
    - :label yes_from_prague  :abi f(uint,uint) 0x0f 0xf201        # 140
    - :label yes_from_prague  :abi f(uint,uint) 0x10 0xf201        # 140
    - :label yes_from_prague  :abi f(uint,uint) 0x11 0xf201        # 140
    - :label no  :abi f(uint,uint) 0x12 0xf201        # 140
    
    - :label no  :abi f(uint,uint) 0x100000 0xf201    # 141
    - :label no  :abi f(uint,uint) 0x10c0de 0xf201    # 142
    - :label yes :abi f(uint,uint) 0x101157 0xf201    # 143

    # If we send data, it behaves normally
    - :label yes :abi f(uint,uint) 0x01 0xf202        # 144
    - :label yes :abi f(uint,uint) 0x02 0xf202        # 145
    - :label yes :abi f(uint,uint) 0x03 0xf202        # 146
    - :label yes :abi f(uint,uint) 0x04 0xf202        # 147
    - :label yes :abi f(uint,uint) 0x05 0xf202        # 148
    - :label yes :abi f(uint,uint) 0x06 0xf202        # 149
    - :label yes :abi f(uint,uint) 0x07 0xf202        # 150
    - :label yes :abi f(uint,uint) 0x08 0xf202        # 151
    - :label yes :abi f(uint,uint) 0x09 0xf202        # 152
    - :label yes :abi f(uint,uint) 0x0a 0xf202        # 153
    - :label yes_from_prague  :abi f(uint,uint) 0x0b 0xf202        # 154
    - :label yes_from_prague  :abi f(uint,uint) 0x0c 0xf202        # 155
    - :label yes_from_prague  :abi f(uint,uint) 0x0d 0xf202        # 156
    - :label yes_from_prague  :abi f(uint,uint) 0x0e 0xf202        # 157
    - :label yes_from_prague  :abi f(uint,uint) 0x0f 0xf202        # 158
    - :label yes_from_prague  :abi f(uint,uint) 0x10 0xf202        # 158
    - :label yes_from_prague  :abi f(uint,uint) 0x11 0xf202        # 158
    - :label no  :abi f(uint,uint) 0x12 0xf202        # 158
    
    - :label no  :abi f(uint,uint) 0x100000 0xf202    # 159
    - :label no  :abi f(uint,uint) 0x10c0de 0xf202    # 160
    - :label yes :abi f(uint,uint) 0x101157 0xf202    # 161

    # If we send wei and data
    - :label yes :abi f(uint,uint) 0x01 0xf203        # 162
    - :label yes :abi f(uint,uint) 0x02 0xf203        # 163
    - :label yes :abi f(uint,uint) 0x03 0xf203        # 164
    - :label yes :abi f(uint,uint) 0x04 0xf203        # 165
    - :label yes :abi f(uint,uint) 0x05 0xf203        # 166
    - :label yes :abi f(uint,uint) 0x06 0xf203        # 167
    - :label yes :abi f(uint,uint) 0x07 0xf203        # 168
    - :label yes :abi f(uint,uint) 0x08 0xf203        # 169
    - :label yes :abi f(uint,uint) 0x09 0xf203        # 170
    - :label yes :abi f(uint,uint) 0x0a 0xf203        # 171
    - :label yes_from_prague  :abi f(uint,uint) 0x0b 0xf203        # 172
    - :label yes_from_prague  :abi f(uint,uint) 0x0c 0xf203        # 173
    - :label yes_from_prague  :abi f(uint,uint) 0x0d 0xf203        # 174
    - :label yes_from_prague  :abi f(uint,uint) 0x0e 0xf203        # 175
    - :label yes_from_prague  :abi f(uint,uint) 0x0f 0xf203        # 176
    - :label yes_from_prague  :abi f(uint,uint) 0x10 0xf203        # 176
    - :label yes_from_prague  :abi f(uint,uint) 0x11 0xf203        # 176
    - :label no  :abi f(uint,uint) 0x12 0xf203        # 176
    
    - :label no  :abi f(uint,uint) 0x100000 0xf203    # 177
    - :label no  :abi f(uint,uint) 0x10c0de 0xf203    # 178
    - :label yes :abi f(uint,uint) 0x101157 0xf203    # 179


    # If we receive data, it behaves normally
    - :label yes :abi f(uint,uint) 0x01 0xf204        # 180
    - :label yes :abi f(uint,uint) 0x02 0xf204        # 181
    - :label yes :abi f(uint,uint) 0x03 0xf204        # 182
    - :label yes :abi f(uint,uint) 0x04 0xf204        # 183
    - :label yes :abi f(uint,uint) 0x05 0xf204        # 184
    - :label yes :abi f(uint,uint) 0x06 0xf204        # 185
    - :label yes :abi f(uint,uint) 0x07 0xf204        # 186
    - :label yes :abi f(uint,uint) 0x08 0xf204        # 187
    - :label yes :abi f(uint,uint) 0x09 0xf204        # 188
    - :label yes :abi f(uint,uint) 0x0a 0xf204        # 189
    - :label yes_from_prague  :abi f(uint,uint) 0x0b 0xf204        # 190
    - :label yes_from_prague  :abi f(uint,uint) 0x0c 0xf204        # 191
    - :label yes_from_prague  :abi f(uint,uint) 0x0d 0xf204        # 192
    - :label yes_from_prague  :abi f(uint,uint) 0x0e 0xf204        # 193
    - :label yes_from_prague  :abi f(uint,uint) 0x0f 0xf204        # 194
    - :label yes_from_prague  :abi f(uint,uint) 0x10 0xf204        # 194
    - :label yes_from_prague  :abi f(uint,uint) 0x11 0xf204        # 194
    - :label no  :abi f(uint,uint) 0x12 0xf204        # 194
    
    - :label no  :abi f(uint,uint) 0x100000 0xf204    # 195
    - :label no  :abi f(uint,uint) 0x10c0de 0xf204    # 196
    - :label yes :abi f(uint,uint) 0x101157 0xf204    # 197

    # If we send wei and receive data
    - :label yes :abi f(uint,uint) 0x01 0xf205        # 198
    - :label yes :abi f(uint,uint) 0x02 0xf205        # 199
    - :label yes :abi f(uint,uint) 0x03 0xf205        # 200
    - :label yes :abi f(uint,uint) 0x04 0xf205        # 201
    - :label yes :abi f(uint,uint) 0x05 0xf205        # 202
    - :label yes :abi f(uint,uint) 0x06 0xf205        # 203
    - :label yes :abi f(uint,uint) 0x07 0xf205        # 204
    - :label yes :abi f(uint,uint) 0x08 0xf205        # 205
    - :label yes :abi f(uint,uint) 0x09 0xf205        # 206
    - :label yes :abi f(uint,uint) 0x0a 0xf205        # 207
    - :label yes_from_prague  :abi f(uint,uint) 0x0b 0xf205        # 208
    - :label yes_from_prague  :abi f(uint,uint) 0x0c 0xf205        # 209
    - :label yes_from_prague  :abi f(uint,uint) 0x0d 0xf205        # 210
    - :label yes_from_prague  :abi f(uint,uint) 0x0e 0xf205        # 211
    - :label yes_from_prague  :abi f(uint,uint) 0x0f 0xf205        # 212
    - :label yes_from_prague  :abi f(uint,uint) 0x10 0xf205        # 212
    - :label yes_from_prague  :abi f(uint,uint) 0x11 0xf205        # 212
    - :label no  :abi f(uint,uint) 0x12 0xf205        # 212
    
    - :label no  :abi f(uint,uint) 0x100000 0xf205    # 213
    - :label no  :abi f(uint,uint) 0x10c0de 0xf205    # 214
    - :label yes :abi f(uint,uint) 0x101157 0xf205    # 215

    # DELEGATECALL
    - :label yes :abi f(uint,uint) 0x01 0xf400        # 216
    - :label yes :abi f(uint,uint) 0x02 0xf400        # 217
    - :label yes :abi f(uint,uint) 0x03 0xf400        # 218
    - :label yes :abi f(uint,uint) 0x04 0xf400        # 219
    - :label yes :abi f(uint,uint) 0x05 0xf400        # 220
    - :label yes :abi f(uint,uint) 0x06 0xf400        # 221
    - :label yes :abi f(uint,uint) 0x07 0xf400        # 222
    - :label yes :abi f(uint,uint) 0x08 0xf400        # 223
    - :label yes :abi f(uint,uint) 0x09 0xf400        # 224
    - :label yes :abi f(uint,uint) 0x0a 0xf400        # 225
    - :label yes_from_prague  :abi f(uint,uint) 0x0b 0xf400        # 226
    - :label yes_from_prague  :abi f(uint,uint) 0x0c 0xf400        # 227
    - :label yes_from_prague  :abi f(uint,uint) 0x0d 0xf400        # 228
    - :label yes_from_prague  :abi f(uint,uint) 0x0e 0xf400        # 229
    - :label yes_from_prague  :abi f(uint,uint) 0x0f 0xf400        # 230
    - :label yes_from_prague  :abi f(uint,uint) 0x10 0xf400        # 230
    - :label yes_from_prague  :abi f(uint,uint) 0x11 0xf400        # 230
    - :label no  :abi f(uint,uint) 0x12 0xf400        # 230
    
    - :label no  :abi f(uint,uint) 0x100000 0xf400    # 231
    - :label no  :abi f(uint,uint) 0x10c0de 0xf400    # 232
    - :label yes :abi f(uint,uint) 0x101157 0xf400    # 233

    # If we send data, it behaves normally
    - :label yes :abi f(uint,uint) 0x01 0xf402        # 234
    - :label yes :abi f(uint,uint) 0x02 0xf402        # 235
    - :label yes :abi f(uint,uint) 0x03 0xf402        # 236
    - :label yes :abi f(uint,uint) 0x04 0xf402        # 237
    - :label yes :abi f(uint,uint) 0x05 0xf402        # 238
    - :label yes :abi f(uint,uint) 0x06 0xf402        # 239
    - :label yes :abi f(uint,uint) 0x07 0xf402        # 240
    - :label yes :abi f(uint,uint) 0x08 0xf402        # 241
    - :label yes :abi f(uint,uint) 0x09 0xf402        # 242
    - :label yes :abi f(uint,uint) 0x0a 0xf402        # 243
    - :label yes_from_prague  :abi f(uint,uint) 0x0b 0xf402        # 244
    - :label yes_from_prague  :abi f(uint,uint) 0x0c 0xf402        # 245
    - :label yes_from_prague  :abi f(uint,uint) 0x0d 0xf402        # 246
    - :label yes_from_prague  :abi f(uint,uint) 0x0e 0xf402        # 247
    - :label yes_from_prague  :abi f(uint,uint) 0x0f 0xf402        # 248
    - :label yes_from_prague  :abi f(uint,uint) 0x10 0xf402        # 248
    - :label yes_from_prague  :abi f(uint,uint) 0x11 0xf402        # 248
    - :label no  :abi f(uint,uint) 0x12 0xf402        # 248
    
    - :label no  :abi f(uint,uint) 0x100000 0xf402    # 249
    - :label no  :abi f(uint,uint) 0x10c0de 0xf402    # 250
    - :label yes :abi f(uint,uint) 0x101157 0xf402    # 251


    # If we receive data, it behaves normally
    - :label yes :abi f(uint,uint) 0x01 0xf404        # 252
    - :label yes :abi f(uint,uint) 0x02 0xf404        # 253
    - :label yes :abi f(uint,uint) 0x03 0xf404        # 254
    - :label yes :abi f(uint,uint) 0x04 0xf404        # 255
    - :label yes :abi f(uint,uint) 0x05 0xf404        # 256
    - :label yes :abi f(uint,uint) 0x06 0xf404        # 257
    - :label yes :abi f(uint,uint) 0x07 0xf404        # 258
    - :label yes :abi f(uint,uint) 0x08 0xf404        # 259
    - :label yes :abi f(uint,uint) 0x09 0xf404        # 260
    - :label yes :abi f(uint,uint) 0x0a 0xf404        # 261
    - :label yes_from_prague  :abi f(uint,uint) 0x0b 0xf404        # 262
    - :label yes_from_prague  :abi f(uint,uint) 0x0c 0xf404        # 263
    - :label yes_from_prague  :abi f(uint,uint) 0x0d 0xf404        # 264
    - :label yes_from_prague  :abi f(uint,uint) 0x0e 0xf404        # 265
    - :label yes_from_prague  :abi f(uint,uint) 0x0f 0xf404        # 266
    - :label yes_from_prague  :abi f(uint,uint) 0x10 0xf404        # 266
    - :label yes_from_prague  :abi f(uint,uint) 0x11 0xf404        # 266
    - :label no  :abi f(uint,uint) 0x12 0xf404        # 266
    
    - :label no  :abi f(uint,uint) 0x100000 0xf404    # 267
    - :label no  :abi f(uint,uint) 0x10c0de 0xf404    # 268
    - :label yes :abi f(uint,uint) 0x101157 0xf404    # 269

    # STATICCALL
    - :label yes :abi f(uint,uint) 0x01 0xfa00        # 270
    - :label yes :abi f(uint,uint) 0x02 0xfa00        # 271
    - :label yes :abi f(uint,uint) 0x03 0xfa00        # 272
    - :label yes :abi f(uint,uint) 0x04 0xfa00        # 273
    - :label yes :abi f(uint,uint) 0x05 0xfa00        # 274
    - :label yes :abi f(uint,uint) 0x06 0xfa00        # 275
    - :label yes :abi f(uint,uint) 0x07 0xfa00        # 276
    - :label yes :abi f(uint,uint) 0x08 0xfa00        # 277
    - :label yes :abi f(uint,uint) 0x09 0xfa00        # 278
    - :label yes :abi f(uint,uint) 0x0a 0xfa00        # 279
    - :label yes_from_prague  :abi f(uint,uint) 0x0b 0xfa00        # 280
    - :label yes_from_prague  :abi f(uint,uint) 0x0c 0xfa00        # 281
    - :label yes_from_prague  :abi f(uint,uint) 0x0d 0xfa00        # 282
    - :label yes_from_prague  :abi f(uint,uint) 0x0e 0xfa00        # 283
    - :label yes_from_prague  :abi f(uint,uint) 0x0f 0xfa00        # 284
    - :label yes_from_prague  :abi f(uint,uint) 0x10 0xfa00        # 284
    - :label yes_from_prague  :abi f(uint,uint) 0x11 0xfa00        # 284
    - :label no  :abi f(uint,uint) 0x12 0xfa00        # 284
    
    - :label no  :abi f(uint,uint) 0x100000 0xfa00    # 285
    - :label no  :abi f(uint,uint) 0x10c0de 0xfa00    # 286
    - :label yes :abi f(uint,uint) 0x101157 0xfa00    # 287

    # If we send data, it behaves normally
    - :label yes :abi f(uint,uint) 0x01 0xfa02        # 288
    - :label yes :abi f(uint,uint) 0x02 0xfa02        # 289
    - :label yes :abi f(uint,uint) 0x03 0xfa02        # 290
    - :label yes :abi f(uint,uint) 0x04 0xfa02        # 291
    - :label yes :abi f(uint,uint) 0x05 0xfa02        # 292
    - :label yes :abi f(uint,uint) 0x06 0xfa02        # 293
    - :label yes :abi f(uint,uint) 0x07 0xfa02        # 294
    - :label yes :abi f(uint,uint) 0x08 0xfa02        # 295
    - :label yes :abi f(uint,uint) 0x09 0xfa02        # 296
    - :label yes :abi f(uint,uint) 0x0a 0xfa02        # 297
    - :label yes_from_prague  :abi f(uint,uint) 0x0b 0xfa02        # 298
    - :label yes_from_prague  :abi f(uint,uint) 0x0c 0xfa02        # 299
    - :label yes_from_prague  :abi f(uint,uint) 0x0d 0xfa02        # 300
    - :label yes_from_prague  :abi f(uint,uint) 0x0e 0xfa02        # 301
    - :label yes_from_prague  :abi f(uint,uint) 0x0f 0xfa02        # 302
    - :label yes_from_prague  :abi f(uint,uint) 0x10 0xfa02        # 302
    - :label yes_from_prague  :abi f(uint,uint) 0x11 0xfa02        # 302
    - :label no  :abi f(uint,uint) 0x12 0xfa02        # 302
    
    - :label no  :abi f(uint,uint) 0x100000 0xfa02    # 303
    - :label no  :abi f(uint,uint) 0x10c0de 0xfa02    # 304
    - :label yes :abi f(uint,uint) 0x101157 0xfa02    # 305


    # If we receive data, it behaves normally
    - :label yes :abi f(uint,uint) 0x01 0xfa04        # 306
    - :label yes :abi f(uint,uint) 0x02 0xfa04        # 307
    - :label yes :abi f(uint,uint) 0x03 0xfa04        # 308
    - :label yes :abi f(uint,uint) 0x04 0xfa04        # 309
    - :label yes :abi f(uint,uint) 0x05 0xfa04        # 310
    - :label yes :abi f(uint,uint) 0x06 0xfa04        # 311
    - :label yes :abi f(uint,uint) 0x07 0xfa04        # 312
    - :label yes :abi f(uint,uint) 0x08 0xfa04        # 313
    - :label yes :abi f(uint,uint) 0x09 0xfa04        # 314
    - :label yes :abi f(uint,uint) 0x0a 0xfa04        # 315
    - :label yes_from_prague  :abi f(uint,uint) 0x0b 0xfa04        # 316
    - :label yes_from_prague  :abi f(uint,uint) 0x0c 0xfa04        # 317
    - :label yes_from_prague  :abi f(uint,uint) 0x0d 0xfa04        # 318
    - :label yes_from_prague  :abi f(uint,uint) 0x0e 0xfa04        # 319
    - :label yes_from_prague  :abi f(uint,uint) 0x0f 0xfa04        # 320
    - :label yes_from_prague  :abi f(uint,uint) 0x10 0xfa04        # 320
    - :label yes_from_prague  :abi f(uint,uint) 0x11 0xfa04        # 320
    - :label no  :abi f(uint,uint) 0x12 0xfa04        # 320
    
    - :label no  :abi f(uint,uint) 0x100000 0xfa04    # 321
    - :label no  :abi f(uint,uint) 0x10c0de 0xfa04    # 322
    - :label yes :abi f(uint,uint) 0x101157 0xfa04    # 323



    # Get the account balance
    - :label yes :abi f(uint,uint) 0x01 0x31          # 324
    - :label yes :abi f(uint,uint) 0x02 0x31          # 325
    - :label yes :abi f(uint,uint) 0x03 0x31          # 326
    - :label yes :abi f(uint,uint) 0x04 0x31          # 327
    - :label yes :abi f(uint,uint) 0x05 0x31          # 328
    - :label yes :abi f(uint,uint) 0x06 0x31          # 329
    - :label yes :abi f(uint,uint) 0x07 0x31          # 330
    - :label yes :abi f(uint,uint) 0x08 0x31          # 331
    - :label yes :abi f(uint,uint) 0x09 0x31          # 332
    - :label yes :abi f(uint,uint) 0x0a 0x31          # 333
    - :label yes_from_prague  :abi f(uint,uint) 0x0b 0x31          # 334
    - :label yes_from_prague  :abi f(uint,uint) 0x0c 0x31          # 335
    - :label yes_from_prague  :abi f(uint,uint) 0x0d 0x31          # 336
    - :label yes_from_prague  :abi f(uint,uint) 0x0e 0x31          # 337
    - :label yes_from_prague  :abi f(uint,uint) 0x0f 0x31          # 338
    - :label yes_from_prague  :abi f(uint,uint) 0x10 0x31          # 338
    - :label yes_from_prague  :abi f(uint,uint) 0x11 0x31          # 338
    - :label no  :abi f(uint,uint) 0x12 0x31          # 338
    
    - :label no  :abi f(uint,uint) 0x100000 0x31      # 339
    - :label no  :abi f(uint,uint) 0x10c0de 0x31      # 340
    - :label yes :abi f(uint,uint) 0x101157 0x31      # 341

    # Get the account codehash
    - :label yes :abi f(uint,uint) 0x01 0x3f          # 342
    - :label yes :abi f(uint,uint) 0x02 0x3f          # 343
    - :label yes :abi f(uint,uint) 0x03 0x3f          # 344
    - :label yes :abi f(uint,uint) 0x04 0x3f          # 345
    - :label yes :abi f(uint,uint) 0x05 0x3f          # 346
    - :label yes :abi f(uint,uint) 0x06 0x3f          # 347
    - :label yes :abi f(uint,uint) 0x07 0x3f          # 348
    - :label yes :abi f(uint,uint) 0x08 0x3f          # 349
    - :label yes :abi f(uint,uint) 0x09 0x3f          # 350
    - :label yes :abi f(uint,uint) 0x0a 0x3f          # 351
    - :label yes_from_prague  :abi f(uint,uint) 0x0b 0x3f          # 352
    - :label yes_from_prague  :abi f(uint,uint) 0x0c 0x3f          # 353
    - :label yes_from_prague  :abi f(uint,uint) 0x0d 0x3f          # 354
    - :label yes_from_prague  :abi f(uint,uint) 0x0e 0x3f          # 355
    - :label yes_from_prague  :abi f(uint,uint) 0x0f 0x3f          # 356
    - :label yes_from_prague  :abi f(uint,uint) 0x10 0x3f          # 356
    - :label yes_from_prague  :abi f(uint,uint) 0x11 0x3f          # 356
    - :label no  :abi f(uint,uint) 0x12 0x3f          # 356
    
    - :label no  :abi f(uint,uint) 0x100000 0x3f      # 357
    - :label no  :abi f(uint,uint) 0x10c0de 0x3f      # 358
    - :label yes :abi f(uint,uint) 0x101157 0x3f      # 359

    # Copy account code
    - :label yes :abi f(uint,uint) 0x01 0x3c          # 360
    - :label yes :abi f(uint,uint) 0x02 0x3c          # 361
    - :label yes :abi f(uint,uint) 0x03 0x3c          # 362
    - :label yes :abi f(uint,uint) 0x04 0x3c          # 363
    - :label yes :abi f(uint,uint) 0x05 0x3c          # 364
    - :label yes :abi f(uint,uint) 0x06 0x3c          # 365
    - :label yes :abi f(uint,uint) 0x07 0x3c          # 366
    - :label yes :abi f(uint,uint) 0x08 0x3c          # 367
    - :label yes :abi f(uint,uint) 0x09 0x3c          # 368
    - :label yes :abi f(uint,uint) 0x0a 0x3c          # 369
    - :label yes_from_prague  :abi f(uint,uint) 0x0b 0x3c          # 370
    - :label yes_from_prague  :abi f(uint,uint) 0x0c 0x3c          # 371
    - :label yes_from_prague  :abi f(uint,uint) 0x0d 0x3c          # 372
    - :label yes_from_prague  :abi f(uint,uint) 0x0e 0x3c          # 373
    - :label yes_from_prague  :abi f(uint,uint) 0x0f 0x3c          # 374
    - :label yes_from_prague  :abi f(uint,uint) 0x10 0x3c          # 374
    - :label yes_from_prague  :abi f(uint,uint) 0x11 0x3c          # 374
    - :label no  :abi f(uint,uint) 0x12 0x3c          # 374
    
    - :label no  :abi f(uint,uint) 0x100000 0x3c      # 375
    - :label no  :abi f(uint,uint) 0x10c0de 0x3c      # 376
    - :label yes :abi f(uint,uint) 0x101157 0x3c      # 377

    # Get code size
    - :label yes :abi f(uint,uint) 0x01 0x3b          # 378
    - :label yes :abi f(uint,uint) 0x02 0x3b          # 379
    - :label yes :abi f(uint,uint) 0x03 0x3b          # 380
    - :label yes :abi f(uint,uint) 0x04 0x3b          # 381
    - :label yes :abi f(uint,uint) 0x05 0x3b          # 382
    - :label yes :abi f(uint,uint) 0x06 0x3b          # 383
    - :label yes :abi f(uint,uint) 0x07 0x3b          # 384
    - :label yes :abi f(uint,uint) 0x08 0x3b          # 385
    - :label yes :abi f(uint,uint) 0x09 0x3b          # 386
    - :label yes :abi f(uint,uint) 0x0a 0x3b          # 387
    - :label yes_from_prague  :abi f(uint,uint) 0x0b 0x3b          # 388
    - :label yes_from_prague  :abi f(uint,uint) 0x0c 0x3b          # 389
    - :label yes_from_prague  :abi f(uint,uint) 0x0d 0x3b          # 390
    - :label yes_from_prague  :abi f(uint,uint) 0x0e 0x3b          # 391
    - :label yes_from_prague  :abi f(uint,uint) 0x0f 0x3b          # 392
    - :label yes_from_prague  :abi f(uint,uint) 0x10 0x3b          # 392
    - :label yes_from_prague  :abi f(uint,uint) 0x11 0x3b          # 392
    - :label no  :abi f(uint,uint) 0x12 0x3b          # 392
    
    - :label no  :abi f(uint,uint) 0x100000 0x3b      # 393
    - :label no  :abi f(uint,uint) 0x10c0de 0x3b      # 394
    - :label yes :abi f(uint,uint) 0x101157 0x3b      # 395

    gasLimit:
    - '40000000'
    gasPrice: '10'
    nonce: '0'
    secretKey: 45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8
    to: cccccccccccccccccccccccccccccccccccccccc

    value:
    - '100000'



  expect:

  - indexes:
      data: 
      - :label yes
    network: 
    - ">=Cancun"
    result:
      cccccccccccccccccccccccccccccccccccccccc:
        storage:
          # If this is a precompile (or previously accessed acct.), we
          # expect to always have the same gas cost
          0x00: 0x01
          0x01: 0x00
  - indexes:
      data: 
      - :label yes_from_prague
      - :label all_then_yes_from_prague
    network: 
    - ">=Prague"
    result:
      cccccccccccccccccccccccccccccccccccccccc:
        storage:
          # If this is a precompile (or previously accessed acct.), we
          # expect to always have the same gas cost
          0x00: 0x01
          0x01: 0x00



  # The EIP 2929 cost for a new account reference
  - indexes:
      data: 
      - :label no
    network: 
    - ">=Cancun"
    result:
      cccccccccccccccccccccccccccccccccccccccc:
        storage:
          # If this isn't a precompile, we expect the second call to it to cost
          # less than the first
          0x00: 0x0000
          0x01: 0x09c4
  - indexes:
      data: 
      - :label yes_from_prague
    network: 
    - "Cancun"
    result:
      cccccccccccccccccccccccccccccccccccccccc:
        storage:
          # If this isn't a precompile, we expect the second call to it to cost
          # less than the first
          0x00: 0x0000
          0x01: 0x09c4


  # The cost for a new trie
  - indexes:
      data: 
      - :label new
    network: 
    - ">=Cancun"
    result:
      cccccccccccccccccccccccccccccccccccccccc:
        storage:
          # If we need to create a new trie, that's a different cost
          # than the EIP 2929 one.
          0x00: 0x0000
          0x01: 0x61a8


  # The cost for a new reference AND a new trie
  - indexes:
      data: 
      - :label all
    network: 
    - ">=Cancun"
    result:
      cccccccccccccccccccccccccccccccccccccccc:
        storage:
          # If we need to create a new trie, that's a different cost
          # than the EIP 2929 one.
          0x00: 0x0000
          0x01: 0x6b6c
  - indexes:
      data: 
      - :label all_then_yes_from_prague
    network: 
    - "Cancun"
    result:
      cccccccccccccccccccccccccccccccccccccccc:
        storage:
          # If we need to create a new trie, that's a different cost
          # than the EIP 2929 one.
          0x00: 0x0000
          0x01: 0x6b6c

