revertRetDataSize:

  # After a reverted call RETURNDATASIZE should return zero, even if
  # there was returned data previously

  env:
    currentCoinbase: 2adc25665018aa1fe0e6bc666dac8fc2697ff9ba
    currentDifficulty: 0x20000
    currentGasLimit: 100000000
    currentNumber: 1
    currentTimestamp: 1000

  _info:
    comment: Ori Pomerantz qbzzt1@gmail.com

  pre:

    cccccccccccccccccccccccccccccccccccccccc:
      balance: '0x0ba1a9ce0ba1a9ce'
      code: |
        {   ;  $4 is the type of thing that fails
            ; $36 is the failure itself

            (def 'callType   $4)
            (def 'call         0xf1)
            (def 'callcode     0xf2)
            (def 'delegatecall 0xf4)
            (def 'staticcall   0xfa)
            (def 'create       0xf0)
            (def 'create2      0xf5)

            (def 'failureType $36)
            (def 'oog 0)

            ; We need these values for CREATE(2)
            (def 'uf        0x0200)
            (def 'jmp       0x0300)
            (def 'jmpi      0x0400)
            (def 'badOpcode 0x0500)
            (def 'badCall   0xFF00)

            (def 'NOP 0)

            ; Code for CREATE(2) to fail

            (def 'codeLoc      0x0000)
            (def 'codeLength   0x0100)

            (if (= failureType oog)
               [codeLength] (lll (sha3 0 (- 0 1)) codeLoc)
               NOP
            )


            (if (= failureType badCall)
               [codeLength] (call (gas) 0xFF00 0 0 0 0 0)
               NOP
            )



            ; lll protects us from the other failures, so we need to use vm code
            (if (= failureType uf) {
                 (mstore8 codeLoc         0x50)     ; POP
                 (mstore8 (+ codeLoc 1)   0x00)     ; STOP
                 [codeLength] 2
               }
               NOP
            )

            (if (= failureType jmp) {
                 (mstore8 codeLoc         0x60)     ; PUSH1 0x00
                 (mstore8 (+ codeLoc 1)   0x00)
                 (mstore8 (+ codeLoc 2)   0x56)     ; JUMP
                 (mstore8 (+ codeLoc 2)   0x00)     ; STOP
                 [codeLength] 4
               }
               NOP
            )

            (if (= failureType jmpi) {
                 (mstore8 codeLoc         0x60)     ; PUSH1 0x01
                 (mstore8 (+ codeLoc 1)   0x01)
                 (mstore8 (+ codeLoc 2)   0x60)     ; PUSH1 0x01
                 (mstore8 (+ codeLoc 3)   0x01)
                 (mstore8 (+ codeLoc 4)   0x57)     ; JUMPI
                 (mstore8 (+ codeLoc 5)   0x00)     ; STOP
                 [codeLength] 6
               }
               NOP
            )




            (if (= failureType badOpcode) {
                 (mstore8 codeLoc         0xFE)     ; Invalid opcode
                 (mstore8 (+ codeLoc 1)   0x00)     ; STOP
                 [codeLength] 2
               }
               NOP
            )




            ; The actual failures start here ----------------------------------------

            (if (and (= callType call) (= failureType oog))
                  {
                    (call (gas) 0x1000 0 0 0 0 0x40)
                    [[0]] (returndatasize)
                    (call 0 0x1000 0 0 0 0 0x40)
                    [[1]] (returndatasize)
                  }
               NOP)


            ; If failureType isn't zero, it's the address of a contract to call
            (if (and (= callType call) (> failureType 0))
                  {
                    (call (gas) 0x1000 0 0 0 0 0x40)
                    [[0]] (returndatasize)
                    (call (- (gas) 0xF0000) failureType 0 0 0 0 0x40)
                    [[1]] (returndatasize)
                  }
               NOP)



            (if (and (= callType callcode) (= failureType oog))
                  {
                    (callcode (gas) 0x1000 0 0 0 0 0x40)
                    [[0]] (returndatasize)
                    (callcode 0 0x1000 0 0 0 0 0x40)
                    [[1]] (returndatasize)
                  }
               NOP)


            ; If failureType isn't zero, it's the address of a contract to call
            (if (and (= callType callcode) (> failureType 0))
                  {
                    (call (gas) 0x1000 0 0 0 0 0x40)
                    [[0]] (returndatasize)
                    (callcode (gas) failureType 0 0 0 0 0x40)
                    [[1]] (returndatasize)
                  }
               NOP)




            (if (and (= callType delegatecall) (= failureType oog))
                  {
                    (delegatecall (gas) 0x1000 0 0 0 0x40)
                    [[0]] (returndatasize)
                    (delegatecall 0 0x1000 0 0 0 0x40)
                    [[1]] (returndatasize)
                  }
               NOP)


            ; If failureType isn't zero, it's the address of a contract to call
            (if (and (= callType delegatecall) (> failureType 0))
                  {
                    (call (gas) 0x1000 0 0 0 0 0x40)
                    [[0]] (returndatasize)
                    (delegatecall (gas) failureType 0 0 0 0x40)
                    [[1]] (returndatasize)
                  }
               NOP)




            (if (and (= callType staticcall) (= failureType oog))
                  {
                    (staticcall (gas) 0x1000 0 0 0 0x40)
                    [[0]] (returndatasize)
                    (staticcall 0 0x1000 0 0 0 0x40)
                    [[1]] (returndatasize)
                  }
               NOP)


            ; If failureType isn't zero, it's the address of a contract to call
            (if (and (= callType staticcall) (> failureType 0))
                  {
                    (call (gas) 0x1000 0 0 0 0 0x40)
                    [[0]] (returndatasize)
                    (staticcall (gas) failureType 0 0 0 0x40)
                    [[1]] (returndatasize)
                  }
               NOP)


            (if (= callType create)
                  {
                    (staticcall (gas) 0x1000 0 0 0 0x40)
                    [[0]] (returndatasize)
                    (create 0 codeLoc @codeLength)
                    [[1]] (returndatasize)
                  }
               NOP)


            (if (= callType create2)
                  {
                    (staticcall (gas) 0x1000 0 0 0 0x40)
                    [[0]] (returndatasize)
                    (create2 0x5a17 0 codeLoc @codeLength)
                    [[1]] (returndatasize)
                  }
               NOP)

            ; Show we got here
            [[2]] 0x60A7

        }
      nonce: '0'
      storage:
      # Verify it gets overwritten
         0: 0x60A7
         1: 0x60A7


    # Call and try to return a 0x40 byte value
    0000000000000000000000000000000000001000:
      balance: '0x0ba1a9ce0ba1a9ce'
      code: |
        {
           [0x00] (/ (- 0 1) 2)
           [0x20] (+ @0x00 1)

           (return 0 0x40)
        }
      nonce: '0'
      storage: {}


    # Stack underflow
    0000000000000000000000000000000000000200:
      balance: '0x0ba1a9ce0ba1a9ce'
      nonce: '0'
      storage: {}

      # POP
      # STOP
      code: :raw 0x5000




    # JUMP to a place that isn't a JUMPDEST
    0000000000000000000000000000000000000300:
      balance: '0x0ba1a9ce0ba1a9ce'
      nonce: '0'
      storage: {}

      # PUSH1 00
      # JUMP
      code: :raw 0x600056


    # JUMPI to a place that isn't a JUMPDEST
    0000000000000000000000000000000000000400:
      balance: '0x0ba1a9ce0ba1a9ce'
      nonce: '0'
      storage: {}

      # PUSH1 01
      # PUSH1 01
      # JUMPI
      code: :raw 0x6001600157


    # Bad opcode
    0000000000000000000000000000000000000500:
      balance: '0x0ba1a9ce0ba1a9ce'
      nonce: '0'
      storage: {}
      code: :raw 0xFE00



    a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
      balance: '0x0ba1a9ce0ba1a9ce'
      code: '0x'
      nonce: '0'
      storage: {}




  transaction:
    data:

    # Out of gas
    - :abi f(uint,uint) 0xF1 0x0000 # CALL
    - :abi f(uint,uint) 0xF2 0x0000 # CALLCODE
    - :abi f(uint,uint) 0xF4 0x0000 # DELEGATECALL
    - :abi f(uint,uint) 0xFA 0x0000 # STATICCALL
    - :abi f(uint,uint) 0xF0 0x0000 # CREATE
    - :abi f(uint,uint) 0xF5 0x0000 # CREATE2

    # Stack underflow
    - :abi f(uint,uint) 0xF1 0x0200 # CALL
    - :abi f(uint,uint) 0xF2 0x0200 # CALLCODE
    - :abi f(uint,uint) 0xF4 0x0200 # DELEGATECALL
    - :abi f(uint,uint) 0xFA 0x0200 # STATICCALL
    - :abi f(uint,uint) 0xF0 0x0200 # CREATE
    - :abi f(uint,uint) 0xF5 0x0200 # CREATE2

    # JUMP
    - :abi f(uint,uint) 0xF1 0x0300 # CALL
    - :abi f(uint,uint) 0xF2 0x0300 # CALLCODE
    - :abi f(uint,uint) 0xF4 0x0300 # DELEGATECALL
    - :abi f(uint,uint) 0xFA 0x0300 # STATICCALL
    - :abi f(uint,uint) 0xF0 0x0300 # CREATE
    - :abi f(uint,uint) 0xF5 0x0300 # CREATE2


    # JUMPI
    - :abi f(uint,uint) 0xF1 0x0400 # CALL
    - :abi f(uint,uint) 0xF2 0x0400 # CALLCODE
    - :abi f(uint,uint) 0xF4 0x0400 # DELEGATECALL
    - :abi f(uint,uint) 0xFA 0x0400 # STATICCALL
    - :abi f(uint,uint) 0xF0 0x0400 # CREATE
    - :abi f(uint,uint) 0xF5 0x0400 # CREATE2


    # Bad opcode tests
    - :abi f(uint,uint) 0xF1 0x0500 # CALL
    - :abi f(uint,uint) 0xF2 0x0500 # CALLCODE
    - :abi f(uint,uint) 0xF4 0x0500 # DELEGATECALL
    - :abi f(uint,uint) 0xFA 0x0500 # STATICCALL
    - :abi f(uint,uint) 0xF0 0x0500 # CREATE
    - :abi f(uint,uint) 0xF5 0x0500 # CREATE2


    # Call a non-existent contract
    - :abi f(uint,uint) 0xF1 0xFF00 # CALL
    - :abi f(uint,uint) 0xF2 0xFF00 # CALLCODE
    - :abi f(uint,uint) 0xF4 0xFF00 # DELEGATECALL
    - :abi f(uint,uint) 0xFA 0xFF00 # STATICCALL
    - :abi f(uint,uint) 0xF0 0xFF00 # CREATE
    - :abi f(uint,uint) 0xF5 0xFF00 # CREATE2



    gasLimit:
    - '80000000'
    gasPrice: '10'
    nonce: '0'
    to: cccccccccccccccccccccccccccccccccccccccc
    value:
    - '1'
    secretKey: "45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8"


  expect:

    # CALL/CREATE failure, including OOG, gives a RETURNDATASIZE of zero and
    # continues the transaction
    - indexes:
        data: !!int -1
        gas:  !!int -1
        value: !!int -1
      network:
        - '>=Cancun'
      result:
        cccccccccccccccccccccccccccccccccccccccc:
          storage:
            0: 0x40   # First returndatasize
            1: 0x00   # Second returndatasize
            2: 0x60A7   # GOAT at the end of the run
