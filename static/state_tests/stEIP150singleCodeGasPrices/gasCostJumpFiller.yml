gasCostJump:

  env:
    currentCoinbase: 2adc25665018aa1fe0e6bc666dac8fc2697ff9ba
    currentDifficulty: 0x20000
    currentGasLimit: 100000000
    currentNumber: 1
    currentTimestamp: 1000

# Human readable information
  _info:
    comment: "Ori Pomerantz qbzzt1@gmail.com"

  pre:

    # Baseline cost, without any jumps
    0000000000000000000000000000000000001000:
      balance: '0x0ba1a9ce0ba1a9ce'
      code: :raw 0x600060005B5B00
        # 0 PUSH1 0
        # 2 PUSH1 5
        # 4 JUMPDEST
        # 5 JUMPDEST
        # 6 STOP
      nonce: 0
      storage: {}


    # Cost with one JUMPDEST replaced with a JUMP
    0000000000000000000000000000000000002000:
      balance: '0x0ba1a9ce0ba1a9ce'
      code: :raw 0x60006005565B00
        # 0 PUSH1 0
        # 2 PUSH1 5
        # 4 JUMP
        # 5 JUMPDEST
        # 6 STOP
      nonce: 0
      storage: {}


    # Cost with one JUMPDEST replaced with a JUMPI
    0000000000000000000000000000000000003000:
      balance: '0x0ba1a9ce0ba1a9ce'
      code: :raw 0x60016005575B00
        # 0 PUSH1 1
        # 2 PUSH1 5
        # 4 JUMPI
        # 5 JUMPDEST
        # 6 STOP
      nonce: 0
      storage: {}


    # Cost with one JUMPDEST replaced with a JUMPI that doesn't jump
    0000000000000000000000000000000000004000:
      balance: '0x0ba1a9ce0ba1a9ce'
      code: :raw 0x60006005575B00
        # 0 PUSH1 0
        # 2 PUSH1 5
        # 4 JUMPI
        # 5 JUMPDEST
        # 6 STOP
      nonce: 0
      storage: {}



    095e7baea6a6c7c4c2dfeb977efac326af552d87:
      balance: '0x0ba1a9ce0ba1a9ce'
      code: |
        {
          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
          ; Initialization

          ; Variables (0x20 byte wide)
          (def 'gasB4             0x000)  ; Before the action being measured

          ; Gas cost for a baseline operation (call a contract that does mstore
          ; and then mload)
          (def 'gasBaseline       0x020)

          ; Gas for for the action intself (call a contract plus <whatever>)
          (def 'gasAction         0x040)

          ; Understand CALLDATA. It is four bytes of function
          ; selector (irrelevant) followed by 32 byte words
          ; of the parameters
          (def 'action        $4 )
          (def 'expectedCost  $36)

          ; Constants
          (def  'NOP    0) ; No operation (for if statements)

          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
          ; Define the actions

          ; Store the gas amount
          (def 'gas0 [gasB4]    (gas))

          ; Get the baseline cost
          (def 'getBaseline {
              gas0
              (call 0x10000 0x01000 0 0 0 0 0)
              [gasBaseline] (- @gasB4 (gas))
          })   ;  def 'getBaseline


          ; The actions

          ; JUMP
          (def 'actJump {
              gas0
              (call 0x10000 0x02000 0 0 0 0 0)
              [gasAction] (- @gasB4 (gas))
          })          ; def 'actJump


          ; JUMPI - success
          (def 'actJumpiT {
              gas0
              (call 0x10000 0x03000 0 0 0 0 0)
              [gasAction] (- @gasB4 (gas))
          })          ; def 'actJumpiT



          ; JUMPI - failure
          (def 'actJumpiF {
              gas0
              (call 0x10000 0x04000 0 0 0 0 0)
              [gasAction] (- @gasB4 (gas))
          })          ; def 'actJumpiF




          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
          ; Run the operation

          getBaseline

          (if (= action 1) actJump   NOP)
          (if (= action 2) actJumpiT NOP)
          (if (= action 3) actJumpiF NOP)

          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
          ; Output

          [[0]] (- @gasAction @gasBaseline expectedCost)

        }
      nonce: '0'
      storage:
         0: 60A7

    a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
      balance: '0x0ba1a9ce0ba1a9ce'
      code: '0x'
      nonce: '0'
      storage: {}


  transaction:
    data:
    #
    # fun(action, expectedCost)
    #
    #
    # JUMPI costs two units more than JUMP
    - :abi fun(uint,uint) 1 0x04
    - :abi fun(uint,uint) 2 0x06
    - :abi fun(uint,uint) 3 0x06


    gasLimit:
    - 80000000
    gasPrice: 10
    nonce: 0
    to: 095e7baea6a6c7c4c2dfeb977efac326af552d87
    value:
    - 1
    secretKey: "45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8"


  expect:
    - indexes:
        data: !!int -1
        gas:  !!int -1
        value: !!int -1
      network:
        - '>=Cancun'
      result:
        095e7baea6a6c7c4c2dfeb977efac326af552d87:
          storage:
            0x00: 0
