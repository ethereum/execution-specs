# Check what happens with weird buffer lengths, 0 or negative.

buffer:

  env:
    currentCoinbase: 2adc25665018aa1fe0e6bc666dac8fc2697ff9ba
    currentDifficulty: 0x20000
    currentGasLimit: 100000000
    currentNumber: 1
    currentTimestamp: 1000

  _info:
    comment: Ori Pomerantz qbzzt1@gmail.com

  pre:

    000000000000000000000000000000000000c0de:
      balance: '0x0ba1a9ce0ba1a9ce'
      code: |
        {
              (return 0 0x120)
        }
      nonce: 0
      storage: {}

    # To check return. If it reverts the goat survives
    000000000000000000000000000000000f30c0de:
      balance: '0x0ba1a9ce0ba1a9ce'
      code: |
        {
               ; We get length from the caller
               (def 'length $0)
               (def 'offset $0x20)

               [[0]] 0    ; capricide
               (return offset length) 
        }
      nonce: 0
      storage:
        0: 0x60A7


    # To check revert.
    000000000000000000000000000000000ff0c0de:
      balance: '0x0ba1a9ce0ba1a9ce'
      code: |
        {
               ; We get length from the caller
               (def 'length $0)
               (def 'offset $0x20)

               (revert offset length) 
        }
      nonce: 0
      storage: {}



    cccccccccccccccccccccccccccccccccccccccc:
      balance: '0x0ba1a9ce0ba1a9ce'
      code: |
        {
           (def 'opcode $4)
           (def 'bufferType $36)
           (def 'NOP 0)

           ; Variables           
           (def 'length     0x2020)
           (def 'offset     0x2040)
         
           ; bufferTypes  0 is normal, 1 is length zero, 2 is negative length
           ; bufferType 3 is excessively long, for opcodes with bounds checking
           ; Add 0 for offset 0x100, 10 for offset 0x0

           ; High offsets:
           ; 20 for 2^256-10
           ; 21 for 2^31-1
           ; 22 for 2^31
           ; 23 for 2^32-1
           ; 24 for 2^32
           ; 25 for 2^63-1
           ; 26 for 2^63
           ; 27 for 2^64-1
           ; 28 for 2^64
           (if (= bufferType 0) {
                   [length] 10
                   [offset] 0x100
             } NOP)
           (if (= bufferType 1) {
                   [length] 0 
                   [offset] 0x100
             } NOP)
           (if (= bufferType 2) {
                   [length] (- 0 10) 
                   [offset] 0x100
             } NOP)
           (if (= bufferType 3) { 
                   [length] 0x1000 
                   [offset] 0x100
             } NOP)
           (if (= bufferType 10) {
                   [length] 10
                   [offset] 0x0
             } NOP)
           (if (= bufferType 11) {
                   [length] 0 
                   [offset] 0x0
             } NOP)
           (if (= bufferType 12) {
                   [length] (- 0 10) 
                   [offset] 0x0
             } NOP)
           (if (= bufferType 13) { 
                   [length] 0x1000 
                   [offset] 0x0
             } NOP)

           ; High memory offsets, should fail with out of gas
           (if (= bufferType 20) { 
                   [length] 5
                   [offset] (- 0 10)
             } NOP)

           (if (= bufferType 21) { 
                   [length] 5
                   [offset] 0x7FFFFFFF
             } NOP)

           (if (= bufferType 22) { 
                   [length] 5
                   [offset] 0x80000000
             } NOP)

           (if (= bufferType 23) { 
                   [length] 5
                   [offset] 0xFFFFFFFF
             } NOP)

           (if (= bufferType 24) { 
                   [length] 5
                   [offset] 0x0100000000
             } NOP)

           (if (= bufferType 25) { 
                   [length] 5
                   [offset] 0x7FFFFFFFFFFFFFFF
             } NOP)

           (if (= bufferType 26) { 
                   [length] 5
                   [offset] 0x8000000000000000
             } NOP)

           (if (= bufferType 27) { 
                   [length] 5
                   [offset] 0xFFFFFFFFFFFFFFFF
             } NOP)

           (if (= bufferType 28) { 
                   [length] 5
                   [offset] 0x010000000000000000
             } NOP)


           (if (= opcode 0x20) (sha3 @offset @length) NOP)
           (if (= opcode 0x37) (calldatacopy @offset 0 @length) NOP)
           (if (= opcode 0x39) (codecopy @offset 0 @length) NOP)
           (if (= opcode 0x3C) (extcodecopy 0xc0de @offset 0 @length) NOP)
           (if (= opcode 0x3E) (returndatacopy @offset 0 @length) NOP)
           (if (= opcode 0xA0) (log0 @offset @length) NOP)
           (if (= opcode 0xA1) (log1 @offset @length 1) NOP)
           (if (= opcode 0xA2) (log2 @offset @length 1 2) NOP)
           (if (= opcode 0xA3) (log3 @offset @length 1 2 3) NOP)
           (if (= opcode 0xA4) (log4 @offset @length 1 2 3 4) NOP)
           (if (= opcode 0xF0) (create 0 @offset @length) NOP)
           (if (= opcode 0xF1)  (call 0x1000 0xc0de 0 @offset @length 0 0) NOP)
           (if (= opcode 0x1F1) (call 0x1000 0xc0de 0 0 0 @offset @length) NOP)
           (if (= opcode 0xF2)  (callcode 0x1000 0xc0de 0 @offset @length 0 0) NOP)
           (if (= opcode 0x1F2) (callcode 0x1000 0xc0de 0 0 0 @offset @length) NOP)
           (if (= opcode 0xF4)  (delegatecall 0x100000 0xc0de @offset @length 0 0) NOP)
           (if (= opcode 0x1F4) (delegatecall 0x100000 0xc0de 0 0 @offset @length) NOP)
           (if (= opcode 0xF5) (create2 0 @offset @length 0x5A17) NOP)
           (if (= opcode 0xFA)  (staticcall 0x100000 0xc0de @offset @length 0 0) NOP)
           (if (= opcode 0x1FA) (staticcall 0x100000 0xc0de 0 0 @offset @length) NOP)

           ; RETURNDATACOPY, after making sure there is return data
           (if (= opcode 0x13E) {
               (call 0x1000 0xc0de 0 0 0 0x100 0x100)
               (returndatacopy @offset 0 @length) 
           } NOP)

           ; check return, requires special handling
           (if (= opcode 0xF3)  (call 0x100000 0xf30c0de 0 length 0x40 0 0) NOP)


           ; check revert, requires special handling
           (if (= opcode 0xFF)  {
              (call 0x100000 0xff0c0de 0 length 0x40 0 0)
              [[0]] (returndatasize)
           } NOP)

           ; Kill the goat
           [[0x100]] 0
        }
      nonce: '0'
      storage:
        # Sacrificial goat to tell reverts apart from successes
        0x100: 0x60A7


    a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
      balance: '0x0ba1a9ce0ba1a9ce'
      code: '0x'
      nonce: '0'
      storage: {}
      
  transaction:
    data:
    # Param #1: The opcode

    # Param #2: Buffer types:

    ########### Offset 0x100 ###############
    #   0 - Valid buffer length (0x100)
    #   1 - Buffer length zero
    #   2 - Negative buffer length
    #   3 - Longer buffer (0x1000)

    ###########  Offset 0x0  ###############
    #  10 - Valid buffer length
    #  11 - Buffer length zero
    #  12 - Negative buffer length
    #  13 - Longer buffer (0x1000)

    ########## Very high offsets
    #  20 - Trying to use memory close to theoretical max (2^256-10)
    # 21 for 2^31-1
    # 22 for 2^31
    # 23 for 2^32-1
    # 24 for 2^32
    # 25 for 2^63-1
    # 26 for 2^63
    # 27 for 2^64-1
    # 28 for 2^64
    #  

    # SHA3       
    - :label ok   :abi f(uint,uint) 0x20 0
    - :label ok   :abi f(uint,uint) 0x20 1
    - :label fail :abi f(uint,uint) 0x20 2
    - :label ok   :abi f(uint,uint) 0x20 10
    - :label ok   :abi f(uint,uint) 0x20 11
    - :label fail :abi f(uint,uint) 0x20 12
    - :label ok :abi f(uint,uint) 0x20 13
    - :label fail :abi f(uint,uint) 0x20 20
    - :label fail :abi f(uint,uint) 0x20 21
    - :label fail :abi f(uint,uint) 0x20 22
    - :label fail :abi f(uint,uint) 0x20 23
    - :label fail :abi f(uint,uint) 0x20 24
    - :label fail :abi f(uint,uint) 0x20 25
    - :label fail :abi f(uint,uint) 0x20 26
    - :label fail :abi f(uint,uint) 0x20 27
    - :label fail :abi f(uint,uint) 0x20 28

    # CALLDATACOPY
    - :label ok   :abi f(uint,uint) 0x37 0   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0x37 1   # Buffer length zero
    - :label fail :abi f(uint,uint) 0x37 2   # Negative buffer length
    - :label ok   :abi f(uint,uint) 0x37 10   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0x37 11   # Buffer length zero
    - :label fail :abi f(uint,uint) 0x37 12   # Negative buffer length
    - :label fail :abi f(uint,uint) 0x37 20
    - :label fail :abi f(uint,uint) 0x37 21
    - :label fail :abi f(uint,uint) 0x37 22
    - :label fail :abi f(uint,uint) 0x37 23
    - :label fail :abi f(uint,uint) 0x37 24
    - :label fail :abi f(uint,uint) 0x37 25
    - :label fail :abi f(uint,uint) 0x37 26
    - :label fail :abi f(uint,uint) 0x37 27
    - :label fail :abi f(uint,uint) 0x37 28

    # CODECOPY
    - :label ok   :abi f(uint,uint) 0x39 0   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0x39 1   # Buffer length zero
    - :label fail :abi f(uint,uint) 0x39 2   # Negative buffer length
    - :label ok   :abi f(uint,uint) 0x39 10   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0x39 11   # Buffer length zero
    - :label fail :abi f(uint,uint) 0x39 12   # Negative buffer length
    - :label fail :abi f(uint,uint) 0x39 20
    - :label fail :abi f(uint,uint) 0x39 21
    - :label fail :abi f(uint,uint) 0x39 22
    - :label fail :abi f(uint,uint) 0x39 23
    - :label fail :abi f(uint,uint) 0x39 24
    - :label fail :abi f(uint,uint) 0x39 25
    - :label fail :abi f(uint,uint) 0x39 26
    - :label fail :abi f(uint,uint) 0x39 27
    - :label fail :abi f(uint,uint) 0x39 28

    # EXTCODECOPY
    - :label ok   :abi f(uint,uint) 0x3c 0   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0x3c 1   # Buffer length zero
    - :label fail :abi f(uint,uint) 0x3c 2   # Negative buffer length
    - :label ok   :abi f(uint,uint) 0x3c 10   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0x3c 11   # Buffer length zero
    - :label fail :abi f(uint,uint) 0x3c 12   # Negative buffer length
    - :label fail :abi f(uint,uint) 0x3c 20
    - :label fail :abi f(uint,uint) 0x3c 21
    - :label fail :abi f(uint,uint) 0x3c 22
    - :label fail :abi f(uint,uint) 0x3c 23
    - :label fail :abi f(uint,uint) 0x3c 24
    - :label fail :abi f(uint,uint) 0x3c 25
    - :label fail :abi f(uint,uint) 0x3c 26
    - :label fail :abi f(uint,uint) 0x3c 27
    - :label fail :abi f(uint,uint) 0x3c 28

    # RETURNDATACOPY, fails when there is no return data unless asked for 0 bytes
    - :label fail :abi f(uint,uint) 0x3e 0   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0x3e 1   # Buffer length zero
    - :label fail :abi f(uint,uint) 0x3e 2   # Negative buffer length
    - :label fail :abi f(uint,uint) 0x3e 10   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0x3e 11   # Buffer length zero
    - :label fail :abi f(uint,uint) 0x3e 12   # Negative buffer length
    - :label fail :abi f(uint,uint) 0x3e 20
    - :label fail :abi f(uint,uint) 0x3e 21
    - :label fail :abi f(uint,uint) 0x3e 22
    - :label fail :abi f(uint,uint) 0x3e 23
    - :label fail :abi f(uint,uint) 0x3e 24
    - :label fail :abi f(uint,uint) 0x3e 25
    - :label fail :abi f(uint,uint) 0x3e 26
    - :label fail :abi f(uint,uint) 0x3e 27
    - :label fail :abi f(uint,uint) 0x3e 28

    # RETURNDATACOPY, after making sure there is return data
    - :label ok   :abi f(uint,uint) 0x13e 0   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0x13e 1   # Buffer length zero
    - :label fail :abi f(uint,uint) 0x13e 2   # Negative buffer length
    - :label ok   :abi f(uint,uint) 0x13e 10   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0x13e 11   # Buffer length zero
    - :label fail :abi f(uint,uint) 0x13e 12   # Negative buffer length
    - :label fail :abi f(uint,uint) 0x13e 20
    - :label fail :abi f(uint,uint) 0x13e 21
    - :label fail :abi f(uint,uint) 0x13e 22
    - :label fail :abi f(uint,uint) 0x13e 23
    - :label fail :abi f(uint,uint) 0x13e 24
    - :label fail :abi f(uint,uint) 0x13e 25
    - :label fail :abi f(uint,uint) 0x13e 26
    - :label fail :abi f(uint,uint) 0x13e 27
    - :label fail :abi f(uint,uint) 0x13e 28

    # RETURNDATACOPY has bounds checking
    - :label fail :abi f(uint,uint) 0x13e 3 # Huge (out of bounds)
    - :label fail :abi f(uint,uint) 0x13e 13 # Huge (out of bounds)

    # LOG0
    - :label ok   :abi f(uint,uint) 0xa0 0   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0xa0 1   # Buffer length zero
    - :label fail :abi f(uint,uint) 0xa0 2   # Negative buffer length
    - :label ok   :abi f(uint,uint) 0xa0 10   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0xa0 11   # Buffer length zero
    - :label fail :abi f(uint,uint) 0xa0 12   # Negative buffer length
    - :label fail :abi f(uint,uint) 0xa0 20
    - :label fail :abi f(uint,uint) 0xa0 21
    - :label fail :abi f(uint,uint) 0xa0 22
    - :label fail :abi f(uint,uint) 0xa0 23
    - :label fail :abi f(uint,uint) 0xa0 24
    - :label fail :abi f(uint,uint) 0xa0 25
    - :label fail :abi f(uint,uint) 0xa0 26
    - :label fail :abi f(uint,uint) 0xa0 27
    - :label fail :abi f(uint,uint) 0xa0 28

    # LOG1
    - :label ok   :abi f(uint,uint) 0xa1 0   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0xa1 1   # Buffer length zero
    - :label fail :abi f(uint,uint) 0xa1 2   # Negative buffer length
    - :label ok   :abi f(uint,uint) 0xa1 10   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0xa1 11   # Buffer length zero
    - :label fail :abi f(uint,uint) 0xa1 12   # Negative buffer length
    - :label fail :abi f(uint,uint) 0xa1 20
    - :label fail :abi f(uint,uint) 0xa1 21
    - :label fail :abi f(uint,uint) 0xa1 22
    - :label fail :abi f(uint,uint) 0xa1 23
    - :label fail :abi f(uint,uint) 0xa1 24
    - :label fail :abi f(uint,uint) 0xa1 25
    - :label fail :abi f(uint,uint) 0xa1 26
    - :label fail :abi f(uint,uint) 0xa1 27
    - :label fail :abi f(uint,uint) 0xa1 28

    # LOG2
    - :label ok   :abi f(uint,uint) 0xa2 0   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0xa2 1   # Buffer length zero
    - :label fail :abi f(uint,uint) 0xa2 2   # Negative buffer length
    - :label ok   :abi f(uint,uint) 0xa2 10   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0xa2 11   # Buffer length zero
    - :label fail :abi f(uint,uint) 0xa2 12   # Negative buffer length
    - :label fail :abi f(uint,uint) 0xa2 20
    - :label fail :abi f(uint,uint) 0xa2 21
    - :label fail :abi f(uint,uint) 0xa2 22
    - :label fail :abi f(uint,uint) 0xa2 23
    - :label fail :abi f(uint,uint) 0xa2 24
    - :label fail :abi f(uint,uint) 0xa2 25
    - :label fail :abi f(uint,uint) 0xa2 26
    - :label fail :abi f(uint,uint) 0xa2 27
    - :label fail :abi f(uint,uint) 0xa2 28

    # LOG3
    - :label ok   :abi f(uint,uint) 0xa3 0   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0xa3 1   # Buffer length zero
    - :label fail :abi f(uint,uint) 0xa3 2   # Negative buffer length
    - :label ok   :abi f(uint,uint) 0xa3 10   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0xa3 11   # Buffer length zero
    - :label fail :abi f(uint,uint) 0xa3 12   # Negative buffer length
    - :label fail :abi f(uint,uint) 0xa3 20
    - :label fail :abi f(uint,uint) 0xa3 21
    - :label fail :abi f(uint,uint) 0xa3 22
    - :label fail :abi f(uint,uint) 0xa3 23
    - :label fail :abi f(uint,uint) 0xa3 24
    - :label fail :abi f(uint,uint) 0xa3 25
    - :label fail :abi f(uint,uint) 0xa3 26
    - :label fail :abi f(uint,uint) 0xa3 27
    - :label fail :abi f(uint,uint) 0xa3 28

    # LOG4
    - :label ok   :abi f(uint,uint) 0xa4 0   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0xa4 1   # Buffer length zero
    - :label fail :abi f(uint,uint) 0xa4 2   # Negative buffer length
    - :label ok   :abi f(uint,uint) 0xa4 10   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0xa4 11   # Buffer length zero
    - :label fail :abi f(uint,uint) 0xa4 12   # Negative buffer length
    - :label fail :abi f(uint,uint) 0xa4 20
    - :label fail :abi f(uint,uint) 0xa4 21
    - :label fail :abi f(uint,uint) 0xa4 22
    - :label fail :abi f(uint,uint) 0xa4 23
    - :label fail :abi f(uint,uint) 0xa4 24
    - :label fail :abi f(uint,uint) 0xa4 25
    - :label fail :abi f(uint,uint) 0xa4 26
    - :label fail :abi f(uint,uint) 0xa4 27
    - :label fail :abi f(uint,uint) 0xa4 28

    # CREATE
    - :label ok   :abi f(uint,uint) 0xf0 0   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0xf0 1   # Buffer length zero
    - :label fail :abi f(uint,uint) 0xf0 2   # Negative buffer length
    - :label ok   :abi f(uint,uint) 0xf0 10   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0xf0 11   # Buffer length zero
    - :label fail :abi f(uint,uint) 0xf0 12   # Negative buffer length
    - :label fail :abi f(uint,uint) 0xf0 20
    - :label fail :abi f(uint,uint) 0xf0 21
    - :label fail :abi f(uint,uint) 0xf0 22
    - :label fail :abi f(uint,uint) 0xf0 23
    - :label fail :abi f(uint,uint) 0xf0 24
    - :label fail :abi f(uint,uint) 0xf0 25
    - :label fail :abi f(uint,uint) 0xf0 26
    - :label fail :abi f(uint,uint) 0xf0 27
    - :label fail :abi f(uint,uint) 0xf0 28

    # CALL, check the args buffer
    - :label ok   :abi f(uint,uint) 0xf1 0   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0xf1 1   # Buffer length zero
    - :label fail :abi f(uint,uint) 0xf1 2   # Negative buffer length
    - :label ok   :abi f(uint,uint) 0xf1 10   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0xf1 11   # Buffer length zero
    - :label fail :abi f(uint,uint) 0xf1 12   # Negative buffer length
    - :label fail :abi f(uint,uint) 0xf1 20
    - :label fail :abi f(uint,uint) 0xf1 21
    - :label fail :abi f(uint,uint) 0xf1 22
    - :label fail :abi f(uint,uint) 0xf1 23
    - :label fail :abi f(uint,uint) 0xf1 24
    - :label fail :abi f(uint,uint) 0xf1 25
    - :label fail :abi f(uint,uint) 0xf1 26
    - :label fail :abi f(uint,uint) 0xf1 27
    - :label fail :abi f(uint,uint) 0xf1 28


    # CALL, check the return buffer
    - :label ok   :abi f(uint,uint) 0x1f1 0   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0x1f1 1   # Buffer length zero
    - :label fail :abi f(uint,uint) 0x1f1 2   # Negative buffer length
    - :label ok   :abi f(uint,uint) 0x1f1 10   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0x1f1 11   # Buffer length zero
    - :label fail :abi f(uint,uint) 0x1f1 12   # Negative buffer length
    - :label fail :abi f(uint,uint) 0x1f1 20
    - :label fail :abi f(uint,uint) 0x1f1 21
    - :label fail :abi f(uint,uint) 0x1f1 22
    - :label fail :abi f(uint,uint) 0x1f1 23
    - :label fail :abi f(uint,uint) 0x1f1 24
    - :label fail :abi f(uint,uint) 0x1f1 25
    - :label fail :abi f(uint,uint) 0x1f1 26
    - :label fail :abi f(uint,uint) 0x1f1 27
    - :label fail :abi f(uint,uint) 0x1f1 28


    # CALLCODE, check the args buffer
    - :label ok   :abi f(uint,uint) 0xf2 0   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0xf2 1   # Buffer length zero
    - :label fail :abi f(uint,uint) 0xf2 2   # Negative buffer length
    - :label ok   :abi f(uint,uint) 0xf2 10   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0xf2 11   # Buffer length zero
    - :label fail :abi f(uint,uint) 0xf2 12   # Negative buffer length
    - :label fail :abi f(uint,uint) 0xf2 20
    - :label fail :abi f(uint,uint) 0xf2 21
    - :label fail :abi f(uint,uint) 0xf2 22
    - :label fail :abi f(uint,uint) 0xf2 23
    - :label fail :abi f(uint,uint) 0xf2 24
    - :label fail :abi f(uint,uint) 0xf2 25
    - :label fail :abi f(uint,uint) 0xf2 26
    - :label fail :abi f(uint,uint) 0xf2 27
    - :label fail :abi f(uint,uint) 0xf2 28


    # CALLCODE, check the return buffer
    - :label ok   :abi f(uint,uint) 0x1f2 0   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0x1f2 1   # Buffer length zero
    - :label fail :abi f(uint,uint) 0x1f2 2   # Negative buffer length
    - :label ok   :abi f(uint,uint) 0x1f2 10   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0x1f2 11   # Buffer length zero
    - :label fail :abi f(uint,uint) 0x1f2 12   # Negative buffer length
    - :label fail :abi f(uint,uint) 0x1f2 20
    - :label fail :abi f(uint,uint) 0x1f2 21
    - :label fail :abi f(uint,uint) 0x1f2 22
    - :label fail :abi f(uint,uint) 0x1f2 23
    - :label fail :abi f(uint,uint) 0x1f2 24
    - :label fail :abi f(uint,uint) 0x1f2 25
    - :label fail :abi f(uint,uint) 0x1f2 26
    - :label fail :abi f(uint,uint) 0x1f2 27
    - :label fail :abi f(uint,uint) 0x1f2 28



    # DELEGATECALL, check the args buffer
    - :label ok   :abi f(uint,uint) 0xf4 0   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0xf4 1   # Buffer length zero
    - :label fail :abi f(uint,uint) 0xf4 2   # Negative buffer length
    - :label ok   :abi f(uint,uint) 0xf4 10   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0xf4 11   # Buffer length zero
    - :label fail :abi f(uint,uint) 0xf4 12   # Negative buffer length
    - :label fail :abi f(uint,uint) 0xf4 20
    - :label fail :abi f(uint,uint) 0xf4 21
    - :label fail :abi f(uint,uint) 0xf4 22
    - :label fail :abi f(uint,uint) 0xf4 23
    - :label fail :abi f(uint,uint) 0xf4 24
    - :label fail :abi f(uint,uint) 0xf4 25
    - :label fail :abi f(uint,uint) 0xf4 26
    - :label fail :abi f(uint,uint) 0xf4 27
    - :label fail :abi f(uint,uint) 0xf4 28


    # DELEGATECALL, check the return buffer
    - :label ok   :abi f(uint,uint) 0x1f4 0   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0x1f4 1   # Buffer length zero
    - :label fail :abi f(uint,uint) 0x1f4 2   # Negative buffer length
    - :label ok   :abi f(uint,uint) 0x1f4 10   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0x1f4 11   # Buffer length zero
    - :label fail :abi f(uint,uint) 0x1f4 12   # Negative buffer length
    - :label fail :abi f(uint,uint) 0x1f4 20
    - :label fail :abi f(uint,uint) 0x1f4 21
    - :label fail :abi f(uint,uint) 0x1f4 22
    - :label fail :abi f(uint,uint) 0x1f4 23
    - :label fail :abi f(uint,uint) 0x1f4 24
    - :label fail :abi f(uint,uint) 0x1f4 25
    - :label fail :abi f(uint,uint) 0x1f4 26
    - :label fail :abi f(uint,uint) 0x1f4 27
    - :label fail :abi f(uint,uint) 0x1f4 28


    # CREATE2
    - :label ok   :abi f(uint,uint) 0xf5 0   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0xf5 1   # Buffer length zero
    - :label fail :abi f(uint,uint) 0xf5 2   # Negative buffer length
    - :label ok   :abi f(uint,uint) 0xf5 10   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0xf5 11   # Buffer length zero
    - :label fail :abi f(uint,uint) 0xf5 12   # Negative buffer length
    - :label fail :abi f(uint,uint) 0xf5 20
    - :label fail :abi f(uint,uint) 0xf5 21
    - :label fail :abi f(uint,uint) 0xf5 22
    - :label fail :abi f(uint,uint) 0xf5 23
    - :label fail :abi f(uint,uint) 0xf5 24
    - :label fail :abi f(uint,uint) 0xf5 25
    - :label fail :abi f(uint,uint) 0xf5 26
    - :label fail :abi f(uint,uint) 0xf5 27
    - :label fail :abi f(uint,uint) 0xf5 28


    # STATICCALL, check the args buffer
    - :label ok   :abi f(uint,uint) 0xfa 0   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0xfa 1   # Buffer length zero
    - :label fail :abi f(uint,uint) 0xfa 2   # Negative buffer length
    - :label ok   :abi f(uint,uint) 0xfa 10   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0xfa 11   # Buffer length zero
    - :label fail :abi f(uint,uint) 0xfa 12   # Negative buffer length
    - :label fail :abi f(uint,uint) 0xfa 20
    - :label fail :abi f(uint,uint) 0xfa 21
    - :label fail :abi f(uint,uint) 0xfa 22
    - :label fail :abi f(uint,uint) 0xfa 23
    - :label fail :abi f(uint,uint) 0xfa 24
    - :label fail :abi f(uint,uint) 0xfa 25
    - :label fail :abi f(uint,uint) 0xfa 26
    - :label fail :abi f(uint,uint) 0xfa 27
    - :label fail :abi f(uint,uint) 0xfa 28

    # STATICCALL, check the return buffer
    - :label ok   :abi f(uint,uint) 0x1fa 0   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0x1fa 1   # Buffer length zero
    - :label fail :abi f(uint,uint) 0x1fa 2   # Negative buffer length
    - :label ok   :abi f(uint,uint) 0x1fa 10   # Valid buffer length
    - :label ok   :abi f(uint,uint) 0x1fa 11   # Buffer length zero
    - :label fail :abi f(uint,uint) 0x1fa 12   # Negative buffer length
    - :label fail :abi f(uint,uint) 0x1fa 20
    - :label fail :abi f(uint,uint) 0x1fa 21
    - :label fail :abi f(uint,uint) 0x1fa 22
    - :label fail :abi f(uint,uint) 0x1fa 23
    - :label fail :abi f(uint,uint) 0x1fa 24
    - :label fail :abi f(uint,uint) 0x1fa 25
    - :label fail :abi f(uint,uint) 0x1fa 26
    - :label fail :abi f(uint,uint) 0x1fa 27
    - :label fail :abi f(uint,uint) 0x1fa 28

  
    # RETURN, needs special handling
    - :label ok-f3   :abi f(uint,uint) 0xf3 0   # Valid buffer length
    - :label ok-f3   :abi f(uint,uint) 0xf3 1   # Buffer length zero
    - :label fail-f3 :abi f(uint,uint) 0xf3 2   # Negative buffer length
    - :label ok-f3   :abi f(uint,uint) 0xf3 10   # Valid buffer length
    - :label ok-f3   :abi f(uint,uint) 0xf3 11   # Buffer length zero
    - :label fail-f3 :abi f(uint,uint) 0xf3 12   # Negative buffer length
    - :label fail-f3 :abi f(uint,uint) 0xf3 20
    - :label fail-f3 :abi f(uint,uint) 0xf3 21
    - :label fail-f3 :abi f(uint,uint) 0xf3 22
    - :label fail-f3 :abi f(uint,uint) 0xf3 23
    - :label fail-f3 :abi f(uint,uint) 0xf3 24
    - :label fail-f3 :abi f(uint,uint) 0xf3 25
    - :label fail-f3 :abi f(uint,uint) 0xf3 26
    - :label fail-f3 :abi f(uint,uint) 0xf3 27
    - :label fail-f3 :abi f(uint,uint) 0xf3 28

    # Revert, needs special handling
    - :label ff-valid :abi f(uint,uint) 0xff 0    # Valid buffer length
    - :label ff-zero  :abi f(uint,uint) 0xff 1    # Zero buffer length
    - :label ff-zero  :abi f(uint,uint) 0xff 2    # Invalid buffer length
    - :label ff-valid :abi f(uint,uint) 0xff 10   # Valid buffer length
    - :label ff-zero  :abi f(uint,uint) 0xff 11   # Zero buffer length
    - :label ff-zero  :abi f(uint,uint) 0xff 12   # Invalid buffer length
    - :label ff-zero  :abi f(uint,uint) 0xff 20
    - :label ff-zero  :abi f(uint,uint) 0xff 21
    - :label ff-zero  :abi f(uint,uint) 0xff 22
    - :label ff-zero  :abi f(uint,uint) 0xff 23
    - :label ff-zero  :abi f(uint,uint) 0xff 24
    - :label ff-zero  :abi f(uint,uint) 0xff 25
    - :label ff-zero  :abi f(uint,uint) 0xff 26
    - :label ff-zero  :abi f(uint,uint) 0xff 27
    - :label ff-zero  :abi f(uint,uint) 0xff 28



    gasLimit:
    - '80000000'
    gasPrice: '10'
    nonce: '0'
    to: cccccccccccccccccccccccccccccccccccccccc
    value:
    - '1'
    secretKey: "45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8"
    
    
  expect:
    # No revert, valid value
    - indexes:
        data: :label ok
        gas:  !!int -1
        value: !!int -1
      network:
        - '>=Cancun'
      result:
        cccccccccccccccccccccccccccccccccccccccc:
          storage:
            0x100: 0 


    # Revert, invalid value. The goat survives
    - indexes:
        data: :label fail
        gas:  !!int -1
        value: !!int -1
      network:
        - '>=Cancun'
      result:
        cccccccccccccccccccccccccccccccccccccccc:
          storage:
            0x100: 0x60A7


    # RETURN was a return, not a revert
    - indexes:
        data: :label ok-f3
        gas:  !!int -1
        value: !!int -1
      network:
        - '>=Cancun'
      result:
        000000000000000000000000000000000f30c0de:
          storage:
            0x0: 0

    # RETURN failed, caused a revert
    - indexes:
        data: :label fail-f3
        gas:  !!int -1
        value: !!int -1
      network:
        - '>=Cancun'
      result:
        000000000000000000000000000000000f30c0de:
          storage:
            0x0: 0x60A7


    # REVERT with a valid buffer
    - indexes:
        data: :label ff-valid
        gas:  !!int -1
        value: !!int -1
      network:
        - '>=Cancun'
      result:
        cccccccccccccccccccccccccccccccccccccccc:
          storage:
            0x0: 10



    # REVERT with a size 0 buffer, or a REVERT that fails and therefore returns zero
    - indexes:
        data: :label ff-zero
        gas:  !!int -1
        value: !!int -1
      network:
        - '>=Cancun'
      result:
        cccccccccccccccccccccccccccccccccccccccc:
          storage:
            0x0: 0
