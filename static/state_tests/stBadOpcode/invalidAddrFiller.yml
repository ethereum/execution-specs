# Check that addresses over 2^160 are truncated so only the least significant 
# 160 bits are meaningful

invalidAddr:

  env:
    currentCoinbase: 2adc25665018aa1fe0e6bc666dac8fc2697ff9ba
    currentDifficulty: 0x20000
    currentGasLimit: 100000000
    currentNumber: 1
    currentTimestamp: 1000

  _info:
    comment: Ori Pomerantz qbzzt1@gmail.com

  pre:

    000000000000000000000000000000000000c0de:
      balance: 0x10000
      code: |
        {
              [0] 0xDEADBEEF
              (return 0 0x120)
        }
      nonce: 0
      storage: {}

    0000000000000000000000000000000000dead01:
      balance: 0x1000
      code: |
         {
            (selfdestruct $0)
         }
      nonce: 0
      storage: {}


    0000000000000000000000000000000000dead02:
      balance: 0x1000
      code: |
         {
            (selfdestruct $0)
         }
      nonce: 0
      storage: {}


 
    cccccccccccccccccccccccccccccccccccccccc:
      balance: '0x0ba1a9ce0ba1a9ce'
      code: |
        {
           ; Inputs
           (def 'opcode $4)
           (def 'addrBase $36)
           (def 'addrType $68)

           ; Constants
           (def 'NOP 0)
           (def 'two160 (shl 1 160))
           (def 'two254 (shl 1 254))
           (def 'two255 (shl 1 255))
           (def 'word 0x20) ; 32 bytes per word

           ; Variables           
           (def 'addr1       0x2000)
           (def 'res1        0x2020)
           (def 'addr2       0x2040)
           (def 'res2        0x2060)
           (def 'resExpected 0x2080)
           (def 'temp        0x20A0)

           ; addrBase 1 is a normal valid address (0x0000c0de)
           ; addrBase 2 is a precompiled address  (0x00000002)
           (if (= addrBase 1) [addr1] 0xC0DE NOP)
           (if (= addrBase 2) [addr1] 0x0002 NOP)

           ; addrType  0 is to just use the base (twice, verify result is consistent)
           ; addrType  1 is addr1 + 2^160
           ; addrType  2 is addr1 + 2^254
           ; addrType  3 is addr1 + 2^255
           ; addrType  4 is addr1 - 2^160

           (if (= addrType 0) [addr2] @addr1 NOP)
           (if (= addrType 1) [addr2] (+ @addr1 two160) NOP)
           (if (= addrType 2) [addr2] (+ @addr1 two254) NOP)
           (if (= addrType 3) [addr2] (+ @addr1 two255) NOP)
           (if (= addrType 4) [addr2] (- @addr1 two160) NOP)

           ; Make sure res1 and res2 store different values to verify they are overwritten
           [res1] 0xFF00FF00FF00FF00
           [res2] 0x00FF00FF00FF00FF
    
           ; BALANCE
           (if (= opcode 0x31) {
             [res1] (balance @addr1)
             [res2] (balance @addr2)
             (if (= addrBase 1) [resExpected] 0x10000 [resExpected] 0x0)
           } NOP)

           ; EXTCODESIZE
           (if (= opcode 0x3b) {
             [res1] (extcodesize @addr1)
             [res2] (extcodesize @addr2)
             (if (= addrBase 1) [resExpected] 0x0F [resExpected] 0x0)
           } NOP)


           ; EXTCODECOPY
           (if (= opcode 0x3c) {
             (extcodecopy @addr1 res1 0 word)
             (extcodecopy @addr2 res2 0 word)
             (if (= addrBase 1) [resExpected] 0x63deadbeef6000526101206000f3000000000000000000000000000000000000
                                [resExpected] 0x0)
           } NOP)

           ; EXTCODHASH
           (if (= opcode 0x3f) {
             [res1] (extcodehash @addr1)
             [res2] (extcodehash @addr2)
             (if (= addrBase 1) [resExpected] 0x85ab232a015279867a1f5b5da4f9688c6c92e555c122e9147f9d13bc53c03e92
                                [resExpected] 0x0)           
           } NOP)

           ; CALL
           (if (= opcode 0xf1) {
             (call 0x1000 @addr1 0 0x2000 0x20 res1 word)
             (call 0x1000 @addr2 0 0x2000 0x20 res2 word)
             (if (= addrBase 1) [resExpected] 0xDEADBEEF 
                                [resExpected] 0x9267d3dbed802941483f1afa2a6bc68de5f653128aca9bf1461c5d0a3ad36ed2)
            } NOP)


           ; CALLCODE
           (if (= opcode 0xf2) {
             (callcode 0x1000 @addr1 0 0x2000 0x20 res1 word)
             (callcode 0x1000 @addr2 0 0x2000 0x20 res2 word)
             (if (= addrBase 1) [resExpected] 0xDEADBEEF 
                                [resExpected] 0x9267d3dbed802941483f1afa2a6bc68de5f653128aca9bf1461c5d0a3ad36ed2)
            } NOP)


           ; DELEGATECALL
           (if (= opcode 0xf4) {
             (delegatecall 0x1000 @addr1 0x2000 0x20 res1 word)
             (delegatecall 0x1000 @addr2 0x2000 0x20 res2 word)
             (if (= addrBase 1) [resExpected] 0xDEADBEEF 
                                [resExpected] 0x9267d3dbed802941483f1afa2a6bc68de5f653128aca9bf1461c5d0a3ad36ed2)
            } NOP)


           ; STATICCALL
           (if (= opcode 0xfa) {
             (staticcall 0x1000 @addr1 0x2000 0x20 res1 word)
             (staticcall 0x1000 @addr2 0x2000 0x20 res2 word)
             (if (= addrBase 1) [resExpected] 0xDEADBEEF 
                                [resExpected] 0x9267d3dbed802941483f1afa2a6bc68de5f653128aca9bf1461c5d0a3ad36ed2)

            } NOP)


           ; SELFDESTRUCT
           (if (= opcode 0xff) {
             ; Save the current balance
             [temp] (balance @addr1)

             ; Tell 0xdead01 to commit suicide, see how much is in @addr1
             (call 0x10000000 0xdead01 0 addr1 word 0 0)
             [res1] (balance @addr1)

             ; Tell 0xdead02 to commit suicide, see how much is in @addr1
             (call 0x10000000 0xdead02 0 addr2 word 0 0)
             [res2] (balance @addr1)

             ; Calculate differences
             [res2] (- @res2 @res1)
             [res1] (- @res1 @temp)

             (if (= addrBase 1) [resExpected] 0x1000 [resExpected] 0x1000)
            } NOP)


           ; Verify res1, res2, and resExpected all contain the same value
           [[0]] (- @res1 @res2)
           [[1]] (- @res1 @resExpected)
     
           ; Kill the goat
           [[0x100]] 0
        }
      nonce: '0'
      storage:
        # Sacrificial goat to tell reverts apart from successes
        0x100: 0x60A7


    a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
      balance: '0x0ba1a9ce0ba1a9ce'
      code: '0x'
      nonce: '0'
      storage: {}


  transaction:
    data:
    # Param #1: The opcode

    # Param #2: addrBase
    #    1 is a normal valid address (0x0000c0de)
    #    2 is a precompiled address  (0x00000002)

    # Param #3: addrType
    #  0 is to just use the base (twice, verify result is consistent)
    #  1 is addr1 + 2^160
    #  2 is addr1 + 2^254
    #  3 is addr1 + 2^255
    #  4 is addr1 - 2^160

    # BALANCE
    - :label ok   :abi f(uint,uint,uint) 0x31 1 0  
    - :label ok   :abi f(uint,uint,uint) 0x31 2 0  
    - :label ok   :abi f(uint,uint,uint) 0x31 1 1  
    - :label ok   :abi f(uint,uint,uint) 0x31 2 1  
    - :label ok   :abi f(uint,uint,uint) 0x31 1 2
    - :label ok   :abi f(uint,uint,uint) 0x31 2 2 
    - :label ok   :abi f(uint,uint,uint) 0x31 1 3 
    - :label ok   :abi f(uint,uint,uint) 0x31 2 3 
    - :label ok   :abi f(uint,uint,uint) 0x31 1 4 
    - :label ok   :abi f(uint,uint,uint) 0x31 2 4 



    # EXTCODESIZE  (10+)
    - :label ok   :abi f(uint,uint,uint) 0x3b 1 0  
    - :label ok   :abi f(uint,uint,uint) 0x3b 2 0  
    - :label ok   :abi f(uint,uint,uint) 0x3b 1 1  
    - :label ok   :abi f(uint,uint,uint) 0x3b 2 1  
    - :label ok   :abi f(uint,uint,uint) 0x3b 1 2
    - :label ok   :abi f(uint,uint,uint) 0x3b 2 2 
    - :label ok   :abi f(uint,uint,uint) 0x3b 1 3 
    - :label ok   :abi f(uint,uint,uint) 0x3b 2 3 
    - :label ok   :abi f(uint,uint,uint) 0x3b 1 4 
    - :label ok   :abi f(uint,uint,uint) 0x3b 2 4 

    # EXTCODECOPY  (20+)
    - :label ok   :abi f(uint,uint,uint) 0x3c 1 0  
    - :label ok   :abi f(uint,uint,uint) 0x3c 2 0  
    - :label ok   :abi f(uint,uint,uint) 0x3c 1 1  
    - :label ok   :abi f(uint,uint,uint) 0x3c 2 1  
    - :label ok   :abi f(uint,uint,uint) 0x3c 1 2
    - :label ok   :abi f(uint,uint,uint) 0x3c 2 2 
    - :label ok   :abi f(uint,uint,uint) 0x3c 1 3 
    - :label ok   :abi f(uint,uint,uint) 0x3c 2 3 
    - :label ok   :abi f(uint,uint,uint) 0x3c 1 4 
    - :label ok   :abi f(uint,uint,uint) 0x3c 2 4 


    # EXTCODEHASH  (30+)
    - :label ok   :abi f(uint,uint,uint) 0x3f 1 0  
    - :label ok   :abi f(uint,uint,uint) 0x3f 2 0  
    - :label ok   :abi f(uint,uint,uint) 0x3f 1 1  
    - :label ok   :abi f(uint,uint,uint) 0x3f 2 1  
    - :label ok   :abi f(uint,uint,uint) 0x3f 1 2
    - :label ok   :abi f(uint,uint,uint) 0x3f 2 2 
    - :label ok   :abi f(uint,uint,uint) 0x3f 1 3 
    - :label ok   :abi f(uint,uint,uint) 0x3f 2 3 
    - :label ok   :abi f(uint,uint,uint) 0x3f 1 4 
    - :label ok   :abi f(uint,uint,uint) 0x3f 2 4 


    # CALL         (40+)
    - :label ok   :abi f(uint,uint,uint) 0xf1 1 0  
    - :label ok   :abi f(uint,uint,uint) 0xf1 2 0  
    - :label ok   :abi f(uint,uint,uint) 0xf1 1 1  
    - :label ok   :abi f(uint,uint,uint) 0xf1 2 1  
    - :label ok   :abi f(uint,uint,uint) 0xf1 1 2
    - :label ok   :abi f(uint,uint,uint) 0xf1 2 2 
    - :label ok   :abi f(uint,uint,uint) 0xf1 1 3 
    - :label ok   :abi f(uint,uint,uint) 0xf1 2 3 
    - :label ok   :abi f(uint,uint,uint) 0xf1 1 4 
    - :label ok   :abi f(uint,uint,uint) 0xf1 2 4

 
    # CALLCODE     (50+)
    - :label ok   :abi f(uint,uint,uint) 0xf2 1 0  
    - :label ok   :abi f(uint,uint,uint) 0xf2 2 0  
    - :label ok   :abi f(uint,uint,uint) 0xf2 1 1  
    - :label ok   :abi f(uint,uint,uint) 0xf2 2 1  
    - :label ok   :abi f(uint,uint,uint) 0xf2 1 2
    - :label ok   :abi f(uint,uint,uint) 0xf2 2 2 
    - :label ok   :abi f(uint,uint,uint) 0xf2 1 3 
    - :label ok   :abi f(uint,uint,uint) 0xf2 2 3 
    - :label ok   :abi f(uint,uint,uint) 0xf2 1 4 
    - :label ok   :abi f(uint,uint,uint) 0xf2 2 4

 
    # DELEGATECALL  (60+)
    - :label ok   :abi f(uint,uint,uint) 0xf4 1 0  
    - :label ok   :abi f(uint,uint,uint) 0xf4 2 0  
    - :label ok   :abi f(uint,uint,uint) 0xf4 1 1  
    - :label ok   :abi f(uint,uint,uint) 0xf4 2 1  
    - :label ok   :abi f(uint,uint,uint) 0xf4 1 2
    - :label ok   :abi f(uint,uint,uint) 0xf4 2 2 
    - :label ok   :abi f(uint,uint,uint) 0xf4 1 3 
    - :label ok   :abi f(uint,uint,uint) 0xf4 2 3 
    - :label ok   :abi f(uint,uint,uint) 0xf4 1 4 
    - :label ok   :abi f(uint,uint,uint) 0xf4 2 4 


    # STATICCALL     (70+)
    - :label ok   :abi f(uint,uint,uint) 0xfa 1 0  
    - :label ok   :abi f(uint,uint,uint) 0xfa 2 0  
    - :label ok   :abi f(uint,uint,uint) 0xfa 1 1  
    - :label ok   :abi f(uint,uint,uint) 0xfa 2 1  
    - :label ok   :abi f(uint,uint,uint) 0xfa 1 2
    - :label ok   :abi f(uint,uint,uint) 0xfa 2 2 
    - :label ok   :abi f(uint,uint,uint) 0xfa 1 3 
    - :label ok   :abi f(uint,uint,uint) 0xfa 2 3 
    - :label ok   :abi f(uint,uint,uint) 0xfa 1 4 
    - :label ok   :abi f(uint,uint,uint) 0xfa 2 4 


    # SELFDESTRUCT   (80+)
    # Address type 2 is meaningless, we need to call a suicidal contract
    - :label ok   :abi f(uint,uint,uint) 0xff 1 0  
    - :label ok   :abi f(uint,uint,uint) 0xff 1 1  
    - :label ok   :abi f(uint,uint,uint) 0xff 1 2
    - :label ok   :abi f(uint,uint,uint) 0xff 1 3 
    - :label ok   :abi f(uint,uint,uint) 0xff 1 4 



    gasLimit:
    - '80000000'
    gasPrice: '10'
    nonce: '0'
    to: cccccccccccccccccccccccccccccccccccccccc
    value:
    - '1'
    secretKey: "45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8"


  expect:
    # No revert, valid value
    - indexes:
        data: :label ok
        gas:  !!int -1
        value: !!int -1
      network:
        - '>=Cancun'
      result:
        cccccccccccccccccccccccccccccccccccccccc:
          storage:
            # Difference between the two values
            0x00: 0
            0x01: 0
            0x02: 0
            0x03: 0
            0x04: 0
            0x05: 0
            0x06: 0

            # Dead goat
            0x100: 0 

