"""
A `Block` is a single link in the chain that is Ethereum. Each `Block` contains
a `Header` and zero or more transactions. Each `Header` contains associated
metadata like the block number, parent block hash, and how much gas was
consumed by its transactions.

Together, these blocks form a cryptographically secure journal recording the
history of all state transitions that have happened since the genesis of the
chain.
"""
from dataclasses import dataclass
from typing import Tuple

from ethereum_types.bytes import Bytes, Bytes8, Bytes32
from ethereum_types.frozen import slotted_freezable
from ethereum_types.numeric import U256, Uint

from ..crypto.hash import Hash32
from .fork_types import Address, Bloom, Root
from .transactions import Transaction


@slotted_freezable
@dataclass
class Header:
    """
    Header portion of a block on the chain, containing metadata and
    cryptographic commitments to the block's contents.

    #### Attributes
    - `parent_hash`: Hash of the parent block's header.
    - `ommers_hash`: Hash of the ommers (uncle blocks) in this block.
    - `coinbase`: Address of the miner who mined this block.
    - `state_root`: Root hash of the state trie after executing all
    transactions in this block.
    - `transactions_root`: Root hash of the transactions trie, which contains
    all transactions in this block.
    - `receipt_root`: Root hash of the receipts trie, which contains all
    receipts for transactions in this block.
    - `bloom`: Bloom filter for logs generated by transactions in this block.
    - `difficulty`: Difficulty of the block.
    - `number`: Block number, (height) in the chain.
    - `gas_limit`: Maximum gas allowed in this block.
    - `gas_used`: Total gas used by all transactions in this block.
    - `timestamp`: Timestamp of when the block was mined.
    - `extra_data`: Arbitrary data included by the miner.
    - `mix_digest`: Mix hash used in the mining process.
    - `nonce`: Nonce used in the mining process.
    """

    parent_hash: Hash32
    ommers_hash: Hash32
    coinbase: Address
    state_root: Root
    transactions_root: Root
    receipt_root: Root
    bloom: Bloom
    difficulty: Uint
    number: Uint
    gas_limit: Uint
    gas_used: Uint
    timestamp: U256
    extra_data: Bytes
    mix_digest: Bytes32
    nonce: Bytes8


@slotted_freezable
@dataclass
class Block:
    """
    A complete block on Ethereum, containing a [`header`], a list of
    transactions, and a list of ommers (uncle blocks).

    #### Attributes
    - `header`: The block header.
    - `transactions`: A tuple of transactions included in this block.
    - `ommers`: A tuple of ommers (uncle blocks) included in this block.

    [`header`]: ref:ethereum.byzantium.blocks.Header
    """

    header: Header
    transactions: Tuple[Transaction, ...]
    ommers: Tuple[Header, ...]


@slotted_freezable
@dataclass
class Log:
    """
    Data record produced during the execution of a transaction. Logs are used
    by smart contracts to emit events, which can be efficiently searched using
    the bloom filter in the block header.

    #### Attributes
    - `address`: The address of the contract that emitted the log.
    - `topics`: A tuple of up to four topics associated with the log, used for
    filtering.
    - `data`: The data payload of the log.
    """

    address: Address
    topics: Tuple[Hash32, ...]
    data: Bytes


@slotted_freezable
@dataclass
class Receipt:
    """
    Result of a transaction execution. Receipts are included in the receipts
    trie.

    #### Attributes
    - `succeeded`: Whether the transaction execution was successful.
    - `cumulative_gas_used`: Total gas used in the block up to and including
    this transaction.
    - `bloom`: Bloom filter for logs generated by this transaction.
    - `logs`: Tuple of logs generated by this transaction.
    """

    succeeded: bool
    cumulative_gas_used: Uint
    bloom: Bloom
    logs: Tuple[Log, ...]
