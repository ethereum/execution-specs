"""
A `Block` is a single link in the chain that is Ethereum. Each `Block` contains
a `Header` and zero or more transactions. Each `Header` contains associated
metadata like the block number, parent block hash, and how much gas was
consumed by its transactions.

Together, these blocks form a cryptographically secure journal recording the
history of all state transitions that have happened since the genesis of the
chain.
"""
from dataclasses import dataclass
from typing import Tuple, Union

from ethereum_rlp import rlp
from ethereum_types.bytes import Bytes, Bytes8, Bytes32
from ethereum_types.frozen import slotted_freezable
from ethereum_types.numeric import U256, Uint

from ..crypto.hash import Hash32
from .fork_types import Address, Bloom, Root
from .transactions import AccessListTransaction, LegacyTransaction, Transaction


@slotted_freezable
@dataclass
class Header:
    """
    Header portion of a block on the chain, containing metadata and
    cryptographic commitments to the block's contents.
    """

    parent_hash: Hash32
    """
    Hash of the parent block's header.
    """

    ommers_hash: Hash32
    """
    Hash of the ommers (uncle blocks) in this block.
    """

    coinbase: Address
    """
    Address of the miner who mined this block.
    """

    state_root: Root
    """
    Root hash of the state trie after executing all transactions in this block.
    """

    transactions_root: Root
    """
    Root hash of the transactions trie, which contains all transactions in this block.
    """

    receipt_root: Root
    """
    Root hash of the receipts trie, which contains all receipts for transactions in this block.
    """

    bloom: Bloom
    """
    Bloom filter for logs generated by transactions in this block.
    """

    difficulty: Uint
    """
    Difficulty of the block.
    """

    number: Uint
    """
    Block number, (height) in the chain.
    """

    gas_limit: Uint
    """
    Maximum gas allowed in this block.
    """

    gas_used: Uint
    """
    Total gas used by all transactions in this block.
    """

    timestamp: U256
    """
    Timestamp of when the block was mined.
    """

    extra_data: Bytes
    """
    Arbitrary data included by the miner.
    """

    mix_digest: Bytes32
    """
    Mix hash used in the mining process.
    """

    nonce: Bytes8
    """
    Nonce used in the mining process.
    """


@slotted_freezable
@dataclass
class Block:
    """
    A complete block on Ethereum, containing a [`header`], a list of
    transactions, and a list of ommers (uncle blocks).

    [`header`]: ref:ethereum.berlin.blocks.Header
    """

    header: Header
    """The block header."""

    transactions: Tuple[Union[Bytes, LegacyTransaction], ...]
    """A tuple of transactions included in this block, which can be either legacy transactions, or access list transactions."""

    ommers: Tuple[Header, ...]
    """A tuple of ommers (uncle blocks) included in this block."""


@slotted_freezable
@dataclass
class Log:
    """
    Data record produced during the execution of a transaction. Logs are used
    by smart contracts to emit events, which can be efficiently searched using
    the bloom filter in the block header.
    """

    address: Address
    """The address of the contract that emitted the log."""

    topics: Tuple[Hash32, ...]
    """A tuple of up to four topics associated with the log, used for filtering."""

    data: Bytes
    """The data payload of the log."""


@slotted_freezable
@dataclass
class Receipt:
    """
    Result of a transaction execution. Receipts are included in the receipts
    trie.
    """

    succeeded: bool
    """Whether the transaction execution was successful."""

    cumulative_gas_used: Uint
    """Total gas used in the block up to and including this transaction."""

    bloom: Bloom
    """Bloom filter for logs generated by this transaction."""

    logs: Tuple[Log, ...]
    """Tuple of logs generated by this transaction."""


def encode_receipt(tx: Transaction, receipt: Receipt) -> Union[Bytes, Receipt]:
    r"""
    Encodes a transaction receipt based on the transaction type.

    The encoding follows the same format as transactions encoding, where:
    - AccessListTransaction receipts are prefixed with `b"\x01"`.
    - LegacyTransaction receipts are returned as is.
    """
    if isinstance(tx, AccessListTransaction):
        return b"\x01" + rlp.encode(receipt)
    else:
        return receipt


def decode_receipt(receipt: Union[Bytes, Receipt]) -> Receipt:
    r"""
    Decodes a receipt from its serialized form.

    The decoding follows the same format as transactions decoding, where:
    - Receipts prefixed with `b"\x01"` are decoded as AccessListTransaction
    receipts.
    - LegacyTransaction receipts are returned as is.
    """
    if isinstance(receipt, Bytes):
        assert receipt[0] == 1
        return rlp.decode_to(Receipt, receipt[1:])
    else:
        return receipt
