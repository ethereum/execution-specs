"""
A `Block` is a single link in the chain that is Ethereum. Each `Block` contains
a `Header` and zero or more transactions. Each `Header` contains associated
metadata like the block number, parent block hash, and how much gas was
consumed by its transactions.

Together, these blocks form a cryptographically secure journal recording the
history of all state transitions that have happened since the genesis of the
chain.
"""
from dataclasses import dataclass
from typing import Tuple

from ethereum_types.bytes import Bytes, Bytes8, Bytes32
from ethereum_types.frozen import slotted_freezable
from ethereum_types.numeric import U256, Uint

from ..crypto.hash import Hash32
from .fork_types import Address, Bloom, Root
from .transactions import Transaction


@slotted_freezable
@dataclass
class Header:
    """
    Header portion of a block on the chain, containing metadata and
    cryptographic commitments to the block's contents.
    """

    parent_hash: Hash32
    """
    Hash ([`keccak256`]) of the parent block's header, encoded with [RLP].

    [`keccak256`]: ref:ethereum.crypto.hash.keccak256
    [RLP]: https://ethereum.github.io/ethereum-rlp/src/ethereum_rlp/rlp.py.html#ethereum_rlp.rlp.encode:0
    """

    ommers_hash: Hash32
    """
    Hash ([`keccak256`]) of the ommers (uncle blocks) in this block, encoded with [RLP].

    [`keccak256`]: ref:ethereum.crypto.hash.keccak256
    [RLP]: https://ethereum.github.io/ethereum-rlp/src/ethereum_rlp/rlp.py.html#ethereum_rlp.rlp.encode:0
    """

    coinbase: Address
    """
    Address of the miner who mined this block.

    The coinbase address receives the block reward and all transaction fees
    (gas price * gas used) from included transactions in the block.
    """

    state_root: Root
    """
    Root hash ([`keccak256`]) of the state trie after executing all transactions in this block.
    It represents the state of the Ethereum Virtual Machine (EVM) after all
    transactions in this block have been processed. It is computed using the
    [`state_root()`] function, which computes the root of the
    Merkle-Patricia [Trie] representing the Ethereum world state.

    [`keccak256`]: ref:ethereum.crypto.hash.keccak256
    [`state_root()`]: ref:ethereum.istanbul.state.state_root
    [Trie]: ref:ethereum.istanbul.trie.Trie
    """

    transactions_root: Root
    """
    Root hash ([`keccak256`]) of the transactions trie, which contains all transactions
    included in this block in their original order. It is computed using the
    [`root()`] function over the Merkle-Patricia [trie] of transactions as the parameter.

    [`keccak256`]: ref:ethereum.crypto.hash.keccak256
    [`root()`]: ref:ethereum.istanbul.trie.root
    [Trie]: ref:ethereum.istanbul.trie.Trie
    """

    receipt_root: Root
    """
    Root hash ([`keccak256`]) of the receipts trie, which contains all receipts for
    transactions in this block. It is computed using the
    [`root()`] function over the Merkle-Patricia [trie] constructed from the receipts.

    [`keccak256`]: ref:ethereum.crypto.hash.keccak256
    [`root()`]: ref:ethereum.istanbul.trie.root
    [Trie]: ref:ethereum.istanbul.trie.Trie
    """

    bloom: Bloom
    """
    Bloom filter for logs generated by transactions in this block.
    Constructed from all logs in the block using the [logs bloom] mechanism.

    [logs bloom]: ref:ethereum.istanbul.bloom.logs_bloom
    """

    difficulty: Uint
    """
    Difficulty of the block, used in Proof-of-Work to determine the effort required
    to mine the block. This value adjusts over time to maintain a relatively
    constant block time and is computed using the [`calculate_block_difficulty()`]
    function.

    [`calculate_block_difficulty()`]: ref:ethereum.istanbul.fork.calculate_block_difficulty
    """

    number: Uint
    """
    Block number, (height) in the chain.
    """

    gas_limit: Uint
    """
    Maximum gas allowed in this block. Pre [EIP-1559], this was the maximum
    gas that could be consumed by all transactions in the block.

    [EIP-1559]: https://eips.ethereum.org/EIPS/eip-1559
    """

    gas_used: Uint
    """
    Total gas used by all transactions in this block.
    """

    timestamp: U256
    """
    Timestamp of when the block was mined, in seconds since the unix epoch.
    """

    extra_data: Bytes
    """
    Arbitrary data included by the miner.
    """

    mix_digest: Bytes32
    """
    Mix hash used in the mining process, which is a cryptographic commitment
    to the block's contents. It [validates] that PoW was done on the correct block.

    [validates]: ref:ethereum.istanbul.fork.validate_proof_of_work
    """

    nonce: Bytes8
    """
    Nonce used in the mining process, which is a value that miners
    increment to find a valid block hash. This is also used to [validate] the
    proof-of-work for this block.

    [validate]: ref:ethereum.istanbul.fork.validate_proof_of_work
    """


@slotted_freezable
@dataclass
class Block:
    """
    A complete block on Ethereum, containing a [`header`], a list of
    transactions, and a list of ommers (uncle blocks).

    [`header`]: ref:ethereum.istanbul.blocks.Header
    """

    header: Header
    """
    The block header.
    """

    transactions: Tuple[Transaction, ...]
    """
    A tuple of transactions included in this block.
    """

    ommers: Tuple[Header, ...]
    """
    A tuple of ommers (uncle blocks) included in this block.
    """


@slotted_freezable
@dataclass
class Log:
    """
    Data record produced during the execution of a transaction. Logs are used
    by smart contracts to emit events, which can be efficiently searched using
    the bloom filter in the block header.
    """

    address: Address
    """
    The address of the contract that emitted the log.
    """

    topics: Tuple[Hash32, ...]
    """
    A tuple of up to four topics associated with the log, used for filtering.
    """

    data: Bytes
    """
    The data payload of the log.
    """


@slotted_freezable
@dataclass
class Receipt:
    """
    Result of a transaction execution. Receipts are included in the receipts
    trie.
    """

    succeeded: bool
    """
    Whether the transaction execution was successful.
    """

    cumulative_gas_used: Uint
    """
    Total gas used in the block up to and including this transaction.
    """

    bloom: Bloom
    """
    Bloom filter for logs generated by this transaction.
    """

    logs: Tuple[Log, ...]
    """
    Tuple of logs generated by this transaction.
    """
