"""
A `Block` is a single link in the chain that is Ethereum. Each `Block` contains
a `Header` and zero or more transactions. Each `Header` contains associated
metadata like the block number, parent block hash, and how much gas was
consumed by its transactions.

Together, these blocks form a cryptographically secure journal recording the
history of all state transitions that have happened since the genesis of the
chain.
"""
from dataclasses import dataclass
from typing import Tuple, Union

from ethereum_rlp import rlp
from ethereum_types.bytes import Bytes, Bytes8, Bytes32
from ethereum_types.frozen import slotted_freezable
from ethereum_types.numeric import U256, Uint

from ..crypto.hash import Hash32
from .fork_types import Address, Bloom, Root
from .transactions import (
    AccessListTransaction,
    FeeMarketTransaction,
    LegacyTransaction,
    Transaction,
)


@slotted_freezable
@dataclass
class Header:
    """
    Header portion of a block on the chain, containing metadata and
    cryptographic commitments to the block's contents.
    """

    parent_hash: Hash32
    """
    Hash
    ([`keccak256`](../crypto/hash.py.html#ethereum.crypto.hash.keccak256:0))
    of the parent block's header, encoded with
    [RLP](https://ethereum.github.io/ethereum-rlp/src/ethereum_rlp/rlp.py.html).
    """

    ommers_hash: Hash32
    """
    Hash
    ([`keccak256`](../crypto/hash.py.html#ethereum.crypto.hash.keccak256:0))
    of the ommers (uncle blocks) in this block, encoded with
    [RLP](https://ethereum.github.io/ethereum-rlp/src/ethereum_rlp/rlp.py.html).
    """

    coinbase: Address
    """
    Address of the miner (or validator) who mined this block.

    The coinbase address receives the block reward and the priority fees (tips)
    from included transactions. Base fees (introduced in
    [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)) are burned and do not
    go to the coinbase.
    """

    state_root: Root
    """
    Root hash
    ([`keccak256`](../crypto/hash.py.html#ethereum.crypto.hash.keccak256:0))
    of the state trie after executing all transactions in this block. It
    represents the state of the Ethereum Virtual Machine (EVM) after all
    transactions in this block have been processed. It is computed using the
    [`state_root()`](./state.py.html#ethereum.arrow_glacier.state.state_root:0)
    function, which computes the root of the Merkle-Patricia
    [Trie](./trie.py.html#ethereum.arrow_glacier.trie.Trie:0) representing the
    Ethereum world state.
    """

    transactions_root: Root
    """
    Root hash
    ([`keccak256`](../crypto/hash.py.html#ethereum.crypto.hash.keccak256:0))
    of the transactions trie, which contains all transactions included in this
    block in their original order. It is computed using the
    [`root()`](./trie.py.html#ethereum.arrow_glacier.trie.root:0) function
    over the Merkle-Patricia
    [trie](./trie.py.html#ethereum.arrow_glacier.trie.Trie:0) of transactions
    as the parameter.
    """

    receipt_root: Root
    """
    Root hash
    ([`keccak256`](../crypto/hash.py.html#ethereum.crypto.hash.keccak256:0))
    of the receipts trie, which contains all receipts for transactions in this
    block. It is computed using the
    [`root()`](./trie.py.html#ethereum.arrow_glacier.trie.root:0) function
    over the Merkle-Patricia
    [trie](./trie.py.html#ethereum.arrow_glacier.trie.Trie:0) constructed from
    the receipts.
    """

    bloom: Bloom
    """
    Bloom filter for logs generated by transactions in this block.
    Constructed from all logs in the block using the
    [logs bloom](./bloom.py.html#ethereum.arrow_glacier.bloom.logs_bloom:0)
    mechanism.
    """

    difficulty: Uint
    """
    Difficulty of the block, used in Proof-of-Work to determine the effort
    required to mine the block. This value adjusts over time to maintain a
    relatively constant block time and is computed using the
    [`calculate_block_difficulty()`](./fork.py.html#ethereum.arrow_glacier.fork.calculate_block_difficulty:0)
    function.
    """

    number: Uint
    """
    Block number, (height) in the chain.
    """

    gas_limit: Uint
    """
    Maximum gas allowed in this block. Pre
    [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559), this was the maximum
    gas that could be consumed by all transactions in the block. Post
    [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559), this is still the
    maximum gas limit, but the base fee per gas is also
    considered when calculating the effective gas limit. This can be adjusted
    [by a factor of 1/1024](https://ethereum.org/en/developers/docs/blocks/)
    from the previous block's gas limit, up until a maximum of 30 million gas.
    """

    gas_used: Uint
    """
    Total gas used by all transactions in this block.
    """

    timestamp: U256
    """
    Timestamp of when the block was mined, in seconds since the unix epoch.
    """

    extra_data: Bytes
    """
    Arbitrary data included by the miner.
    """

    mix_digest: Bytes32
    """
    Mix hash used in the mining process, which is a cryptographic commitment
    to the block's contents. It
    [validates](./fork.py.html#ethereum.arrow_glacier.fork.validate_proof_of_work:0)
    that PoW was done on the correct block.
    """

    nonce: Bytes8
    """
    Nonce used in the mining process, which is a value that miners
    increment to find a valid block hash. This is also used to
    [validate](./fork.py.html#ethereum.arrow_glacier.fork.validate_proof_of_work:0)
    the proof-of-work for this block.
    """

    base_fee_per_gas: Uint
    """
    Base fee per gas for transactions in this block, introduced in
    [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559). This is the minimum
    fee per gas that must be paid for a transaction to be included in this
    block.
    """


@slotted_freezable
@dataclass
class Block:
    """
    A complete block on Ethereum, which is composed of a block
    [`header`](#ethereum.arrow_glacier.blocks.Header:0), a list of
    transactions, and a list of ommers (also known as uncle blocks).

    The block [`header`](#ethereum.arrow_glacier.blocks.Header:0) includes
    PoW-specific fields such as `difficulty`, `nonce`, and `ommersHash`, which
    relate to the mining process. The `coinbase` field denotes the address
    receiving mining and transaction fees.

    The header also contains commitments to the current state (`stateRoot`),
    the transactions (`transactionsRoot`), and the transaction receipts
    (`receiptsRoot`). It also includes a bloom filter which summarizes log
    data from the transactions.

    Ommers are used to provide rewards for near-valid mined blocks that didn't
    become part of the canonical chain.
    """

    header: Header
    """
    The block header containing metadata and cryptographic commitments. Refer
    [headers](#ethereum.arrow_glacier.blocks.Header:0) for more details on the
    fields included in the header.
    """

    transactions: Tuple[Union[Bytes, LegacyTransaction], ...]
    """
    A tuple of transactions included in this block. Each transaction can be
    any of a legacy transaction, an access list transaction, or a fee market
    transaction.
    """

    ommers: Tuple[Header, ...]
    """
    A tuple of ommers (uncle blocks) included in this block. Ommers are
    blocks that were mined at the same time as this block but were not
    included in the main chain.
    """


@slotted_freezable
@dataclass
class Log:
    """
    Data record produced during the execution of a transaction. Logs are used
    by smart contracts to emit events (using the EVM log opcodes
    ([`LOG0`](./vm/instructions/log.py.html#ethereum.arrow_glacier.vm.instructions.log.log0:0),
    [`LOG1`](./vm/instructions/log.py.html#ethereum.arrow_glacier.vm.instructions.log.log1:0),
    [`LOG2`](./vm/instructions/log.py.html#ethereum.arrow_glacier.vm.instructions.log.log2:0),
    [`LOG3`](./vm/instructions/log.py.html#ethereum.arrow_glacier.vm.instructions.log.log3:0)
    and
    [`LOG4`](./vm/instructions/log.py.html#ethereum.arrow_glacier.vm.instructions.log.log4:0)),
    which can be efficiently searched using the bloom filter in the block
    header.
    """

    address: Address
    """
    The address of the contract that emitted the log.
    """

    topics: Tuple[Hash32, ...]
    """
    A tuple of up to four topics associated with the log, used for filtering.
    """

    data: Bytes
    """
    The data payload of the log, which can contain any arbitrary data.
    """


@slotted_freezable
@dataclass
class Receipt:
    """
    Result of a transaction execution. Receipts are included in the receipts
    trie.
    """

    succeeded: bool
    """
    Whether the transaction execution was successful.
    """

    cumulative_gas_used: Uint
    """
    Total gas used in the block up to and including this transaction.
    """

    bloom: Bloom
    """
    Bloom filter for logs generated by this transaction. This is a 2048-byte
    bit array that allows for efficient filtering of logs.
    """

    logs: Tuple[Log, ...]
    """
    A tuple of logs generated by this transaction. Each log contains the
    address of the contract that emitted it, a tuple of topics, and the data
    payload.
    """


def encode_receipt(tx: Transaction, receipt: Receipt) -> Union[Bytes, Receipt]:
    r"""
    Encodes a transaction receipt based on the transaction type.

    The encoding follows the same format as transactions encoding, where:
    - AccessListTransaction receipts are prefixed with `b"\x01"`.
    - FeeMarketTransaction receipts are prefixed with `b"\x02"`.
    - LegacyTransaction receipts are returned as is.
    """
    if isinstance(tx, AccessListTransaction):
        return b"\x01" + rlp.encode(receipt)
    elif isinstance(tx, FeeMarketTransaction):
        return b"\x02" + rlp.encode(receipt)
    else:
        return receipt


def decode_receipt(receipt: Union[Bytes, Receipt]) -> Receipt:
    r"""
    Decodes a receipt from its serialized form.

    The decoding follows the same format as transactions decoding, where:
    - Receipts prefixed with `b"\x01"` are decoded as AccessListTransaction
    receipts.
    - Receipts prefixed with `b"\x02"` are decoded as FeeMarketTransaction
    receipts.
    - LegacyTransaction receipts are returned as is.
    """
    if isinstance(receipt, Bytes):
        assert receipt[0] in (1, 2)
        return rlp.decode_to(Receipt, receipt[1:])
    else:
        return receipt
