"""
abstract: Tests [EIP-6110: Supply validator deposits on chain](https://eips.ethereum.org/EIPS/eip-6110)
    Test [EIP-6110: Supply validator deposits on chain](https://eips.ethereum.org/EIPS/eip-6110).
"""  # noqa: E501
from typing import Dict, List

import pytest

from ethereum_test_tools import (
    Account,
    Address,
    Block,
    BlockchainTestFiller,
    BlockException,
    Environment,
    Macros,
)
from ethereum_test_tools import Opcodes as Op

from .helpers import (
    DepositContract,
    DepositRequest,
    DepositTransaction,
    TestAccount1,
    TestAccount2,
)
from .spec import ref_spec_6110

REFERENCE_SPEC_GIT_PATH = ref_spec_6110.git_path
REFERENCE_SPEC_VERSION = ref_spec_6110.version

pytestmark = pytest.mark.valid_from("Prague")


@pytest.mark.parametrize(
    "requests",
    [
        pytest.param(
            [
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=32_000_000_000,
                        signature=0x03,
                        index=0x0,
                    ),
                ),
            ],
            id="single_deposit_from_eoa",
        ),
        pytest.param(
            [
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=120_000_000_000_000_000,
                        signature=0x03,
                        index=0x0,
                    ),
                    sender_balance=120_000_001_000_000_000 * 10**9,
                ),
            ],
            id="single_deposit_from_eoa_huge_amount",
        ),
        pytest.param(
            [
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=32_000_000_000,
                        signature=0x03,
                        index=0x0,
                    ),
                ),
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=32_000_000_000,
                        signature=0x03,
                        index=0x1,
                    ),
                ),
            ],
            id="multiple_deposit_from_same_eoa",
        ),
        pytest.param(
            [
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=1_000_000_000,
                        signature=0x03,
                        index=i,
                    ),
                )
                for i in range(200)
            ],
            id="multiple_deposit_from_same_eoa_high_count",
        ),
        pytest.param(
            [
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=32_000_000_000,
                        signature=0x03,
                        index=0x0,
                    ),
                    sender_account=TestAccount1,
                ),
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=32_000_000_000,
                        signature=0x03,
                        index=0x1,
                    ),
                    sender_account=TestAccount2,
                ),
            ],
            id="multiple_deposit_from_different_eoa",
        ),
        pytest.param(
            [
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=999_999_999,
                        signature=0x03,
                        index=0x0,
                    ),
                ),
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=32_000_000_000,
                        signature=0x03,
                        index=0x0,
                    ),
                ),
            ],
            id="multiple_deposit_from_same_eoa_first_reverts",
        ),
        pytest.param(
            [
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=32_000_000_000,
                        signature=0x03,
                        index=0x0,
                    ),
                ),
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=999_999_999,
                        signature=0x03,
                        index=0x0,
                    ),
                ),
            ],
            id="multiple_deposit_from_same_eoa_last_reverts",
        ),
        pytest.param(
            [
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=32_000_000_000,
                        signature=0x03,
                        index=0x0,
                        # From traces, gas used by the first tx is 82,718 so reduce by one here
                        gas_limit=0x1431D,
                        valid=False,
                    ),
                ),
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=32_000_000_000,
                        signature=0x03,
                        index=0x0,
                    ),
                ),
            ],
            id="multiple_deposit_from_same_eoa_first_oog",
        ),
        pytest.param(
            [
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=32_000_000_000,
                        signature=0x03,
                        index=0x0,
                    ),
                ),
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=32_000_000_000,
                        signature=0x03,
                        index=0x0,
                        # From traces, gas used by the second tx is 68,594 so reduce by one here
                        gas_limit=0x10BF1,
                        valid=False,
                    ),
                ),
            ],
            id="multiple_deposit_from_same_eoa_last_oog",
        ),
        pytest.param(
            [
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=32_000_000_000,
                        signature=0x03,
                        index=0x0,
                        calldata_modifier=lambda _: b"",
                        valid=False,
                    ),
                ),
            ],
            id="send_eth_from_eoa",
        ),
        pytest.param(
            [
                DepositContract(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=32_000_000_000,
                        signature=0x03,
                        index=0x0,
                    ),
                ),
            ],
            id="single_deposit_from_contract",
        ),
        pytest.param(
            [
                DepositContract(
                    request=[
                        DepositRequest(
                            pubkey=0x01,
                            withdrawal_credentials=0x02,
                            amount=32_000_000_000,
                            signature=0x03,
                            index=0x0,
                        ),
                        DepositRequest(
                            pubkey=0x01,
                            withdrawal_credentials=0x02,
                            amount=1_000_000_000,
                            signature=0x03,
                            index=0x1,
                        ),
                    ],
                ),
            ],
            id="multiple_deposits_from_contract",
        ),
        pytest.param(
            [
                DepositContract(
                    request=[
                        DepositRequest(
                            pubkey=0x01,
                            withdrawal_credentials=0x02,
                            amount=1_000_000_000,
                            signature=0x03,
                            index=i,
                        )
                        for i in range(1000)
                    ],
                    tx_gas_limit=60_000_000,
                ),
            ],
            id="many_deposits_from_contract",
        ),
        pytest.param(
            [
                DepositContract(
                    request=[
                        DepositRequest(
                            pubkey=0x01,
                            withdrawal_credentials=0x02,
                            amount=999_999_999,
                            signature=0x03,
                            index=0x0,
                            valid=False,
                        ),
                        DepositRequest(
                            pubkey=0x01,
                            withdrawal_credentials=0x02,
                            amount=1_000_000_000,
                            signature=0x03,
                            index=0x0,
                        ),
                    ],
                ),
            ],
            id="multiple_deposits_from_contract_first_reverts",
        ),
        pytest.param(
            [
                DepositContract(
                    request=[
                        DepositRequest(
                            pubkey=0x01,
                            withdrawal_credentials=0x02,
                            amount=1_000_000_000,
                            signature=0x03,
                            index=0x0,
                        ),
                        DepositRequest(
                            pubkey=0x01,
                            withdrawal_credentials=0x02,
                            amount=999_999_999,
                            signature=0x03,
                            index=0x1,
                            valid=False,
                        ),
                    ],
                ),
            ],
            id="multiple_deposits_from_contract_last_reverts",
        ),
        pytest.param(
            [
                DepositContract(
                    request=[
                        DepositRequest(
                            pubkey=0x01,
                            withdrawal_credentials=0x02,
                            amount=1_000_000_000,
                            signature=0x03,
                            gas_limit=100,
                            index=0x0,
                            valid=False,
                        ),
                        DepositRequest(
                            pubkey=0x01,
                            withdrawal_credentials=0x02,
                            amount=1_000_000_000,
                            signature=0x03,
                            gas_limit=1_000_000,
                            index=0x0,
                        ),
                    ],
                ),
            ],
            id="multiple_deposits_from_contract_first_oog",
        ),
        pytest.param(
            [
                DepositContract(
                    request=[
                        DepositRequest(
                            pubkey=0x01,
                            withdrawal_credentials=0x02,
                            amount=1_000_000_000,
                            signature=0x03,
                            index=0x0,
                            gas_limit=1_000_000,
                        ),
                        DepositRequest(
                            pubkey=0x01,
                            withdrawal_credentials=0x02,
                            amount=1_000_000_000,
                            signature=0x03,
                            index=0x0,
                            gas_limit=100,
                            valid=False,
                        ),
                    ],
                ),
            ],
            id="multiple_deposits_from_contract_last_oog",
        ),
        pytest.param(
            [
                DepositContract(
                    request=[
                        DepositRequest(
                            pubkey=0x01,
                            withdrawal_credentials=0x02,
                            amount=32_000_000_000,
                            signature=0x03,
                            index=0x0,
                            valid=False,
                        ),
                        DepositRequest(
                            pubkey=0x01,
                            withdrawal_credentials=0x02,
                            amount=1_000_000_000,
                            signature=0x03,
                            index=0x1,
                            valid=False,
                        ),
                    ],
                    extra_code=Op.REVERT(0, 0),
                ),
            ],
            id="multiple_deposits_from_contract_caller_reverts",
        ),
        pytest.param(
            [
                DepositContract(
                    request=[
                        DepositRequest(
                            pubkey=0x01,
                            withdrawal_credentials=0x02,
                            amount=32_000_000_000,
                            signature=0x03,
                            index=0x0,
                            valid=False,
                        ),
                        DepositRequest(
                            pubkey=0x01,
                            withdrawal_credentials=0x02,
                            amount=1_000_000_000,
                            signature=0x03,
                            index=0x1,
                            valid=False,
                        ),
                    ],
                    extra_code=Macros.OOG(),
                ),
            ],
            id="multiple_deposits_from_contract_caller_oog",
        ),
        pytest.param(
            [
                DepositContract(
                    request=[
                        DepositRequest(
                            pubkey=0x01,
                            withdrawal_credentials=0x02,
                            amount=1_000_000_000,
                            signature=0x03,
                            index=i,
                            valid=False,
                        )
                        for i in range(1000)
                    ],
                    tx_gas_limit=23_738_700,
                ),
            ],
            id="many_deposits_from_contract_oog",
        ),
        pytest.param(
            [
                DepositContract(
                    request=[
                        DepositRequest(
                            pubkey=0x01,
                            withdrawal_credentials=0x02,
                            amount=32_000_000_000,
                            signature=0x03,
                            index=0x0,
                        ),
                    ],
                ),
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=32_000_000_000,
                        signature=0x03,
                        index=0x1,
                    ),
                ),
            ],
            id="single_deposit_from_contract_single_deposit_from_eoa",
        ),
        pytest.param(
            [
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=32_000_000_000,
                        signature=0x03,
                        index=0x0,
                    ),
                ),
                DepositContract(
                    request=[
                        DepositRequest(
                            pubkey=0x01,
                            withdrawal_credentials=0x02,
                            amount=32_000_000_000,
                            signature=0x03,
                            index=0x1,
                        ),
                    ],
                ),
            ],
            id="single_deposit_from_eoa_single_deposit_from_contract",
        ),
        pytest.param(
            [
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=32_000_000_000,
                        signature=0x03,
                        index=0x0,
                    ),
                ),
                DepositContract(
                    request=[
                        DepositRequest(
                            pubkey=0x01,
                            withdrawal_credentials=0x02,
                            amount=32_000_000_000,
                            signature=0x03,
                            index=0x1,
                        ),
                    ],
                ),
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=32_000_000_000,
                        signature=0x03,
                        index=0x2,
                    ),
                ),
            ],
            id="single_deposit_from_contract_between_eoa_deposits",
        ),
        pytest.param(
            [
                DepositContract(
                    request=[
                        DepositRequest(
                            pubkey=0x01,
                            withdrawal_credentials=0x02,
                            amount=32_000_000_000,
                            signature=0x03,
                            index=0x0,
                        ),
                    ],
                ),
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=32_000_000_000,
                        signature=0x03,
                        index=0x1,
                    ),
                ),
                DepositContract(
                    request=[
                        DepositRequest(
                            pubkey=0x01,
                            withdrawal_credentials=0x02,
                            amount=32_000_000_000,
                            signature=0x03,
                            index=0x2,
                        ),
                    ],
                ),
            ],
            id="single_deposit_from_eoa_between_contract_deposits",
        ),
        pytest.param(
            [
                DepositContract(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=32_000_000_000,
                        signature=0x03,
                        index=0x0,
                        valid=False,
                    ),
                    call_type=Op.DELEGATECALL,
                ),
            ],
            id="single_deposit_from_contract_delegatecall",
        ),
        pytest.param(
            [
                DepositContract(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=32_000_000_000,
                        signature=0x03,
                        index=0x0,
                        valid=False,
                    ),
                    call_type=Op.STATICCALL,
                ),
            ],
            id="single_deposit_from_contract_staticcall",
        ),
        pytest.param(
            [
                DepositContract(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=32_000_000_000,
                        signature=0x03,
                        index=0x0,
                        valid=False,
                    ),
                    call_type=Op.CALLCODE,
                ),
            ],
            id="single_deposit_from_contract_callcode",
        ),
        pytest.param(
            [
                DepositContract(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=32_000_000_000,
                        signature=0x03,
                        index=0x0,
                    ),
                    call_depth=3,
                ),
            ],
            id="single_deposit_from_contract_call_depth_3",
        ),
        pytest.param(
            [
                DepositContract(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=32_000_000_000,
                        signature=0x03,
                        index=0x0,
                    ),
                    call_depth=1024,
                    tx_gas_limit=2_500_000_000_000,
                ),
            ],
            id="single_deposit_from_contract_call_high_depth",
        ),
        # TODO: Send eth with the transaction to the contract
    ],
)
def test_deposit(
    blockchain_test: BlockchainTestFiller,
    pre: Dict[Address, Account],
    blocks: List[Block],
):
    """
    Test making a deposit to the beacon chain deposit contract.
    """
    blockchain_test(
        genesis_environment=Environment(),
        pre=pre,
        post={},
        blocks=blocks,
    )


@pytest.mark.parametrize(
    "requests,block_body_override_requests,exception",
    [
        pytest.param(
            [],
            [
                DepositRequest(
                    pubkey=0x01,
                    withdrawal_credentials=0x02,
                    amount=1_000_000_000,
                    signature=0x03,
                    index=0x0,
                ),
            ],
            BlockException.INVALID_REQUESTS,
            id="no_deposits_non_empty_requests_list",
        ),
        pytest.param(
            [
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=1_000_000_000,
                        signature=0x03,
                        index=0x0,
                    ),
                ),
            ],
            [],
            BlockException.INVALID_REQUESTS,
            id="single_deposit_empty_requests_list",
        ),
        pytest.param(
            [
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=1_000_000_000,
                        signature=0x03,
                        index=0x0,
                    ),
                ),
            ],
            [
                DepositRequest(
                    pubkey=0x02,
                    withdrawal_credentials=0x02,
                    amount=1_000_000_000,
                    signature=0x03,
                    index=0x0,
                )
            ],
            BlockException.INVALID_REQUESTS,
            id="single_deposit_pubkey_mismatch",
        ),
        pytest.param(
            [
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=1_000_000_000,
                        signature=0x03,
                        index=0x0,
                    ),
                ),
            ],
            [
                DepositRequest(
                    pubkey=0x01,
                    withdrawal_credentials=0x03,
                    amount=1_000_000_000,
                    signature=0x03,
                    index=0x0,
                )
            ],
            BlockException.INVALID_REQUESTS,
            id="single_deposit_credentials_mismatch",
        ),
        pytest.param(
            [
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=1_000_000_000,
                        signature=0x03,
                        index=0x0,
                    ),
                ),
            ],
            [
                DepositRequest(
                    pubkey=0x01,
                    withdrawal_credentials=0x02,
                    amount=2_000_000_000,
                    signature=0x03,
                    index=0x0,
                )
            ],
            BlockException.INVALID_REQUESTS,
            id="single_deposit_amount_mismatch",
        ),
        pytest.param(
            [
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=1_000_000_000,
                        signature=0x03,
                        index=0x0,
                    ),
                ),
            ],
            [
                DepositRequest(
                    pubkey=0x01,
                    withdrawal_credentials=0x02,
                    amount=1_000_000_000,
                    signature=0x04,
                    index=0x0,
                )
            ],
            BlockException.INVALID_REQUESTS,
            id="single_deposit_signature_mismatch",
        ),
        pytest.param(
            [
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=1_000_000_000,
                        signature=0x03,
                        index=0x0,
                    ),
                ),
            ],
            [
                DepositRequest(
                    pubkey=0x01,
                    withdrawal_credentials=0x02,
                    amount=1_000_000_000,
                    signature=0x03,
                    index=0x1,
                )
            ],
            BlockException.INVALID_REQUESTS,
            id="single_deposit_index_mismatch",
        ),
        pytest.param(
            [
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=1_000_000_000,
                        signature=0x03,
                        index=0x0,
                    ),
                ),
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=1_000_000_000,
                        signature=0x03,
                        index=0x1,
                    ),
                ),
            ],
            [
                DepositRequest(
                    pubkey=0x01,
                    withdrawal_credentials=0x02,
                    amount=1_000_000_000,
                    signature=0x03,
                    index=0x1,
                ),
                DepositRequest(
                    pubkey=0x01,
                    withdrawal_credentials=0x02,
                    amount=1_000_000_000,
                    signature=0x03,
                    index=0x0,
                ),
            ],
            BlockException.INVALID_REQUESTS,
            id="two_deposits_out_of_order",
        ),
        pytest.param(
            [
                DepositTransaction(
                    request=DepositRequest(
                        pubkey=0x01,
                        withdrawal_credentials=0x02,
                        amount=1_000_000_000,
                        signature=0x03,
                        index=0x0,
                    ),
                ),
            ],
            [
                DepositRequest(
                    pubkey=0x01,
                    withdrawal_credentials=0x02,
                    amount=1_000_000_000,
                    signature=0x03,
                    index=0x0,
                ),
                DepositRequest(
                    pubkey=0x01,
                    withdrawal_credentials=0x02,
                    amount=1_000_000_000,
                    signature=0x03,
                    index=0x0,
                ),
            ],
            BlockException.INVALID_REQUESTS,
            id="single_deposit_duplicate_in_requests_list",
        ),
    ],
)
def test_deposit_negative(
    blockchain_test: BlockchainTestFiller,
    pre: Dict[Address, Account],
    blocks: List[Block],
):
    """
    Test producing a block with the incorrect deposits in the body of the block,
    and/or Engine API payload.
    """
    blockchain_test(
        genesis_environment=Environment(),
        pre=pre,
        post={},
        blocks=blocks,
    )
